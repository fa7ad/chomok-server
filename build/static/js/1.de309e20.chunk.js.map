{"version":3,"sources":["../node_modules/ramda/es/internal/_isPlaceholder.js","../node_modules/ramda/es/internal/_curry1.js","../node_modules/ramda/es/internal/_curry2.js","../node_modules/ramda/es/internal/_arity.js","../node_modules/ramda/es/internal/_curryN.js","../node_modules/ramda/es/curryN.js","../node_modules/ramda/es/adjust.js","../node_modules/ramda/es/internal/_isArray.js","../node_modules/ramda/es/internal/_isTransformer.js","../node_modules/ramda/es/internal/_dispatchable.js","../node_modules/ramda/es/internal/_xfBase.js","../node_modules/ramda/es/internal/_map.js","../node_modules/ramda/es/internal/_isString.js","../node_modules/ramda/es/internal/_isArrayLike.js","../node_modules/ramda/es/internal/_xwrap.js","../node_modules/ramda/es/bind.js","../node_modules/ramda/es/internal/_reduce.js","../node_modules/ramda/es/internal/_xmap.js","../node_modules/ramda/es/internal/_has.js","../node_modules/ramda/es/internal/_isArguments.js","../node_modules/ramda/es/keys.js","../node_modules/ramda/es/map.js","../node_modules/ramda/es/internal/_isInteger.js","../node_modules/ramda/es/internal/_isFunction.js","../node_modules/ramda/es/type.js","../node_modules/ramda/es/internal/_arrayFromIterator.js","../node_modules/ramda/es/internal/_containsWith.js","../node_modules/ramda/es/identical.js","../node_modules/ramda/es/internal/_equals.js","../node_modules/ramda/es/internal/_functionName.js","../node_modules/ramda/es/equals.js","../node_modules/ramda/es/internal/_indexOf.js","../node_modules/ramda/es/internal/_contains.js","../node_modules/ramda/es/internal/_quote.js","../node_modules/ramda/es/internal/_toISOString.js","../node_modules/ramda/es/internal/_complement.js","../node_modules/ramda/es/internal/_filter.js","../node_modules/ramda/es/internal/_isObject.js","../node_modules/ramda/es/internal/_xfilter.js","../node_modules/ramda/es/filter.js","../node_modules/ramda/es/reject.js","../node_modules/ramda/es/toString.js","../node_modules/ramda/es/internal/_toString.js","../node_modules/ramda/es/internal/_identity.js","../node_modules/ramda/es/internal/_assign.js","../node_modules/ramda/es/internal/_objectAssign.js","../node_modules/ramda/es/objOf.js","../node_modules/ramda/es/internal/_stepCat.js","../node_modules/ramda/es/into.js","../node_modules/ramda/es/invoker.js","../node_modules/ramda/es/test.js","../node_modules/ramda/es/toLower.js","../node_modules/ramda/es/toUpper.js","../node_modules/ramda/es/trim.js","../node_modules/ramda/es/index.js"],"names":["_isPlaceholder","a","_curry1","fn","f1","arguments","length","apply","this","_curry2","f2","b","_b","_a","_arity","n","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","Error","_curryN","received","combined","argsIdx","left","combinedIdx","result","es_curryN","_isArray","Array","isArray","val","Object","prototype","toString","call","_isTransformer","obj","_dispatchable","methodNames","xf","args","slice","pop","idx","transducer","_xfBase","init","_result","_map","functor","len","_isString","x","internal_isArrayLike","nodeType","hasOwnProperty","XWrap","f","acc","_xwrap","es_bind","thisObj","_iterableReduce","iter","step","next","done","value","_methodReduce","methodName","symIterator","Symbol","iterator","_reduce","list","_arrayReduce","reduce","TypeError","_xmap_XMap","XMap","input","internal_xmap","_has","prop","_isArguments_toString","internal_isArguments","hasEnumBug","propertyIsEnumerable","nonEnumerableProps","hasArgsEnumBug","contains","item","es_keys","keys","nIdx","ks","checkArgsLength","es_map","key","Number","isInteger","_isFunction","es_type","undefined","_arrayFromIterator","push","_containsWith","pred","es_identical","_uniqContentEquals","aIterator","bIterator","stackA","stackB","eq","_equals","aItem","typeA","equals","constructor","match","String","_functionName","valueOf","name","message","source","global","ignoreCase","multiline","sticky","unicode","size","entries","concat","values","keysA","extendedStackA","extendedStackB","es_equals","_indexOf","inf","indexOf","_contains","_quote","s","replace","pad","internal_toISOString","Date","toISOString","d","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","toFixed","_complement","_filter","_isObject","_xfilter_XFilter","XFilter","es_filter","filterable","es_reject","es_toString","_toString","seen","recur","y","xs","mapPairs","k","sort","join","test","isNaN","NaN","repr","_identity","_assign","assign","target","output","nextKey","es_objOf","es_invoker","arity","method","es_toLower","es_toUpper","ws","trim","__webpack_require__","__webpack_exports__"],"mappings":"0FAAe,SAAAA,EAAAC,GACf,aAAAA,GAAA,kBAAAA,IAAA,IAAAA,EAAA,4BCSe,SAAAC,EAAAC,GACf,gBAAAC,EAAAH,GACA,WAAAI,UAAAC,QAAkCN,EAAcC,GAChDG,EAEAD,EAAAI,MAAAC,KAAAH,YCJe,SAAAI,EAAAN,GACf,gBAAAO,EAAAT,EAAAU,GACA,OAAAN,UAAAC,QACA,OACA,OAAAI,EAEA,OACA,OAAeV,EAAcC,GAAAS,EAAWR,EAAO,SAAAU,GAC/C,OAAAT,EAAAF,EAAAW,KAGA,QACA,OAAeZ,EAAcC,IAAOD,EAAcW,GAAAD,EAAWV,EAAcC,GAAMC,EAAO,SAAAW,GACxF,OAAAV,EAAAU,EAAAF,KACaX,EAAcW,GAAMT,EAAO,SAAAU,GACxC,OAAAT,EAAAF,EAAAW,KACST,EAAAF,EAAAU,KC3BM,SAAAG,EAAAC,EAAAZ,GAEf,OAAAY,GACA,OACA,kBACA,OAAAZ,EAAAI,MAAAC,KAAAH,YAGA,OACA,gBAAAW,GACA,OAAAb,EAAAI,MAAAC,KAAAH,YAGA,OACA,gBAAAW,EAAAC,GACA,OAAAd,EAAAI,MAAAC,KAAAH,YAGA,OACA,gBAAAW,EAAAC,EAAAC,GACA,OAAAf,EAAAI,MAAAC,KAAAH,YAGA,OACA,gBAAAW,EAAAC,EAAAC,EAAAC,GACA,OAAAhB,EAAAI,MAAAC,KAAAH,YAGA,OACA,gBAAAW,EAAAC,EAAAC,EAAAC,EAAAC,GACA,OAAAjB,EAAAI,MAAAC,KAAAH,YAGA,OACA,gBAAAW,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,OAAAlB,EAAAI,MAAAC,KAAAH,YAGA,OACA,gBAAAW,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,OAAAnB,EAAAI,MAAAC,KAAAH,YAGA,OACA,gBAAAW,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,OAAApB,EAAAI,MAAAC,KAAAH,YAGA,OACA,gBAAAW,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,OAAArB,EAAAI,MAAAC,KAAAH,YAGA,QACA,gBAAAW,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,OAAAtB,EAAAI,MAAAC,KAAAH,YAGA,QACA,UAAAqB,MAAA,gFC9Ce,SAAAC,EAAArB,EAAAsB,EAAAzB,GACf,kBAMA,IALA,IAAA0B,EAAA,GACAC,EAAA,EACAC,EAAAzB,EACA0B,EAAA,EAEAA,EAAAJ,EAAAtB,QAAAwB,EAAAzB,UAAAC,QAAA,CACA,IAAA2B,EAEAD,EAAAJ,EAAAtB,UAA6CN,EAAc4B,EAAAI,KAAAF,GAAAzB,UAAAC,QAC3D2B,EAAAL,EAAAI,IAEAC,EAAA5B,UAAAyB,GACAA,GAAA,GAGAD,EAAAG,GAAAC,EAEWjC,EAAciC,KACzBF,GAAA,GAGAC,GAAA,EAGA,OAAAD,GAAA,EAAA5B,EAAAI,MAAAC,KAAAqB,GAAkDf,EAAMiB,EAAAJ,EAAArB,EAAAuB,EAAA1B,KCQxD,IAUe+B,EARfzB,EAAO,SAAAH,EAAAH,GACP,WAAAG,EACWJ,EAAOC,GAGTW,EAAMR,EAASqB,EAAOrB,EAAA,GAAAH,MC1B/B,IChBegC,EAAAC,MAAAC,SAAA,SAAAC,GACf,aAAAA,KAAAhC,QAAA,sBAAAiC,OAAAC,UAAAC,SAAAC,KAAAJ,ICbe,SAAAK,EAAAC,GACf,0BAAAA,EAAA,qBCgBe,SAAAC,EAAAC,EAAAC,EAAA5C,GACf,kBACA,OAAAE,UAAAC,OACA,OAAAH,IAGA,IAAA6C,EAAAZ,MAAAI,UAAAS,MAAAP,KAAArC,UAAA,GACAuC,EAAAI,EAAAE,MAEA,IAASf,EAAQS,GAAA,CAGjB,IAFA,IAAAO,EAAA,EAEAA,EAAAL,EAAAxC,QAAA,CACA,uBAAAsC,EAAAE,EAAAK,IACA,OAAAP,EAAAE,EAAAK,IAAA5C,MAAAqC,EAAAI,GAGAG,GAAA,EAGA,GAAUR,EAAcC,GAExB,OADAG,EAAAxC,MAAA,KAAAyC,EACAI,CAAAR,GAIA,OAAAzC,EAAAI,MAAAC,KAAAH,YC3Ce,IAAAgD,EAAA,CACfC,KAAA,WACA,OAAA9C,KAAAuC,GAAA,wBAEAd,OAAA,SAAAsB,GACA,OAAA/C,KAAAuC,GAAA,uBAAAQ,KCLe,SAAAC,EAAArD,EAAAsD,GAKf,IAJA,IAAAN,EAAA,EACAO,EAAAD,EAAAnD,OACA2B,EAAAG,MAAAsB,GAEAP,EAAAO,GACAzB,EAAAkB,GAAAhD,EAAAsD,EAAAN,IACAA,GAAA,EAGA,OAAAlB,ECVe,SAAA0B,EAAAC,GACf,0BAAArB,OAAAC,UAAAC,SAAAC,KAAAkB,GCoBA,IAkCeC,EAhCf3D,EAAO,SAAA0D,GACP,QAAMzB,EAAQyB,MAIdA,IAIA,kBAAAA,KAIMD,EAASC,KAIf,IAAAA,EAAAE,WACAF,EAAAtD,OAGA,IAAAsD,EAAAtD,QAIAsD,EAAAtD,OAAA,IACAsD,EAAAG,eAAA,IAAAH,EAAAG,eAAAH,EAAAtD,OAAA,SCjDA0D,EAEA,WACA,SAAAA,EAAA7D,GACAK,KAAAyD,EAAA9D,EAeA,OAZA6D,EAAAxB,UAAA,gCACA,UAAAd,MAAA,kCAGAsC,EAAAxB,UAAA,gCAAA0B,GACA,OAAAA,GAGAF,EAAAxB,UAAA,8BAAA0B,EAAAN,GACA,OAAApD,KAAAyD,EAAAC,EAAAN,IAGAI,EAjBA,GAoBe,SAAAG,EAAAhE,GACf,WAAA6D,EAAA7D,GCEA,IAQeiE,EANf3D,EAAO,SAAAN,EAAAkE,GACP,OAASvD,EAAMX,EAAAG,OAAA,WACf,OAAAH,EAAAI,MAAA8D,EAAAhE,eCPA,SAAAiE,EAAAvB,EAAAmB,EAAAK,GAGA,IAFA,IAAAC,EAAAD,EAAAE,QAEAD,EAAAE,MAAA,CAGA,IAFAR,EAAAnB,EAAA,qBAAAmB,EAAAM,EAAAG,SAEAT,EAAA,yBACAA,IAAA,sBACA,MAGAM,EAAAD,EAAAE,OAGA,OAAA1B,EAAA,uBAAAmB,GAGA,SAAAU,EAAA7B,EAAAmB,EAAAtB,EAAAiC,GACA,OAAA9B,EAAA,uBAAAH,EAAAiC,GAAmDT,EAAIrB,EAAA,qBAAAA,GAAAmB,IAGvD,IAAAY,EAAA,qBAAAC,cAAAC,SAAA,aACe,SAAAC,EAAA9E,EAAA+D,EAAAgB,GAKf,GAJA,oBAAA/E,IACAA,EAASgE,EAAMhE,IAGT0D,EAAYqB,GAClB,OA9CA,SAAAnC,EAAAmB,EAAAgB,GAIA,IAHA,IAAA/B,EAAA,EACAO,EAAAwB,EAAA5E,OAEA6C,EAAAO,GAAA,CAGA,IAFAQ,EAAAnB,EAAA,qBAAAmB,EAAAgB,EAAA/B,MAEAe,EAAA,yBACAA,IAAA,sBACA,MAGAf,GAAA,EAGA,OAAAJ,EAAA,uBAAAmB,GA+BAiB,CAAAhF,EAAA+D,EAAAgB,GAGA,uBAAAA,EAAA,uBACA,OAAAN,EAAAzE,EAAA+D,EAAAgB,EAAA,uBAGA,SAAAA,EAAAJ,GACA,OAAAR,EAAAnE,EAAA+D,EAAAgB,EAAAJ,MAGA,uBAAAI,EAAAT,KACA,OAAAH,EAAAnE,EAAA+D,EAAAgB,GAGA,uBAAAA,EAAAE,OACA,OAAAR,EAAAzE,EAAA+D,EAAAgB,EAAA,UAGA,UAAAG,UAAA,0CClEA,IAAIC,EAEJ,WACA,SAAAC,EAAAtB,EAAAlB,GACAvC,KAAAuC,KACAvC,KAAAyD,IAUA,OAPAsB,EAAA/C,UAAA,qBAAwCa,EAAOC,KAC/CiC,EAAA/C,UAAA,uBAA0Ca,EAAOpB,OAEjDsD,EAAA/C,UAAA,8BAAAP,EAAAuD,GACA,OAAAhF,KAAAuC,GAAA,qBAAAd,EAAAzB,KAAAyD,EAAAuB,KAGAD,EAbA,GAsBeE,EAJfhF,EAAO,SAAAwD,EAAAlB,GACP,WAAauC,EAAIrB,EAAAlB,KCxBF,SAAA2C,EAAAC,EAAA/C,GACf,OAAAL,OAAAC,UAAAuB,eAAArB,KAAAE,EAAA+C,GCAA,IAAIC,EAAQrD,OAAAC,UAAAC,SAUGoD,EARC,WAChB,MAAiB,uBAARD,EAAQlD,KAAArC,WAAA,SAAAuD,GACjB,MAAmB,uBAARgC,EAAQlD,KAAAkB,IAChB,SAAAA,GACH,OAAW8B,EAAI,SAAA9B,KCHfkC,GAEA,CACArD,SAAA,MACCsD,qBAAA,YACDC,EAAA,8GAEAC,EAEA,WAGA,OAAA5F,UAAA0F,qBAAA,UAHA,GAMAG,EAAA,SAAAhB,EAAAiB,GAGA,IAFA,IAAAhD,EAAA,EAEAA,EAAA+B,EAAA5E,QAAA,CACA,GAAA4E,EAAA/B,KAAAgD,EACA,SAGAhD,GAAA,EAGA,UA6DeiD,EAFflG,EArCA,oBAAAqC,OAAA8D,MAAAJ,EAEC,SAAArD,GACD,GAAAL,OAAAK,OACA,SAGA,IAAA+C,EAAAW,EACAC,EAAA,GAEAC,EAAAP,GAA0CJ,EAAYjD,GAEtD,IAAA+C,KAAA/C,GACQ8C,EAAIC,EAAA/C,IAAA4D,GAAA,WAAAb,IACZY,IAAAjG,QAAAqF,GAIA,GAAAG,EAGA,IAFAQ,EAAAN,EAAA1F,OAAA,EAEAgG,GAAA,GAGUZ,EAFVC,EAAAK,EAAAM,GAEc1D,KAAAsD,EAAAK,EAAAZ,KACdY,IAAAjG,QAAAqF,GAGAW,GAAA,EAIA,OAAAC,GAhCA,SAAA3D,GACA,OAAAL,OAAAK,OAAA,GAAAL,OAAA8D,KAAAzD,KCYe6D,EApBfhG,EAEAoC,EAAa,2BAA8B4C,EAAK,SAAAtF,EAAAsD,GAChD,OAAAlB,OAAAC,UAAAC,SAAAC,KAAAe,IACA,wBACA,OAAavB,EAAMuB,EAAAnD,OAAA,WACnB,OAAAH,EAAAuC,KAAAlC,KAAAiD,EAAAlD,MAAAC,KAAAH,cAGA,sBACA,OAAa4E,EAAO,SAAAf,EAAAwC,GAEpB,OADAxC,EAAAwC,GAAAvG,EAAAsD,EAAAiD,IACAxC,GACO,GAAMkC,EAAI3C,IAEjB,QACA,OAAaD,EAAIrD,EAAAsD,OCrDFkD,OAAAC,UCRA,SAAAC,EAAAjD,GACf,4BAAArB,OAAAC,UAAAC,SAAAC,KAAAkB,GC0BA,IAMekD,EAJf5G,EAAO,SAAAoC,GACP,cAAAA,EAAA,YAAAyE,IAAAzE,EAAA,YAAAC,OAAAC,UAAAC,SAAAC,KAAAJ,GAAAW,MAAA,QC9Be,SAAA+D,EAAAzC,GAIf,IAHA,IACAE,EADAS,EAAA,KAGAT,EAAAF,EAAAE,QAAAC,MACAQ,EAAA+B,KAAAxC,EAAAE,OAGA,OAAAO,ECRe,SAAAgC,EAAAC,EAAAvD,EAAAsB,GAIf,IAHA,IAAA/B,EAAA,EACAO,EAAAwB,EAAA5E,OAEA6C,EAAAO,GAAA,CACA,GAAAyD,EAAAvD,EAAAsB,EAAA/B,IACA,SAGAA,GAAA,EAGA,SCaA,IAceiE,EAZf3G,EAAO,SAAAR,EAAAU,GAEP,OAAAV,IAAAU,EAGA,IAAAV,GAAA,EAAAA,IAAA,EAAAU,EAGAV,OAAAU,QCjBA,SAAA0G,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAxH,EAAU+G,EAAkBM,GAI5B,SAAAI,EAAA7G,EAAAD,GACA,OAAA+G,EAAA9G,EAAAD,EAAA4G,EAAAvE,QAAAwE,EAAAxE,SAIA,OAAUiE,EAAa,SAAAvG,EAAAiH,GACvB,OAAYV,EAAaQ,EAAAE,EAAAjH,IARfqG,EAAkBO,GASzBtH,GAGY,SAAA0H,EAAA1H,EAAAU,EAAA6G,EAAAC,GACf,GAAML,EAASnH,EAAAU,GACf,SAGA,IAAAkH,EAAcf,EAAI7G,GAElB,GAAA4H,IAAgBf,EAAInG,GACpB,SAGA,SAAAV,GAAA,MAAAU,EACA,SAGA,uBAAAV,EAAA,4CAAAU,EAAA,uBACA,0BAAAV,EAAA,wBAAAA,EAAA,uBAAAU,IAAA,oBAAAA,EAAA,wBAAAA,EAAA,uBAAAV,GAGA,uBAAAA,EAAA6H,QAAA,oBAAAnH,EAAAmH,OACA,0BAAA7H,EAAA6H,QAAA7H,EAAA6H,OAAAnH,IAAA,oBAAAA,EAAAmH,QAAAnH,EAAAmH,OAAA7H,GAGA,OAAA4H,GACA,gBACA,YACA,aACA,uBAAA5H,EAAA8H,aAA8D,YC5D/C,SAAA9D,GAEf,IAAA+D,EAAAC,OAAAhE,GAAA+D,MAAA,mBACA,aAAAA,EAAA,GAAAA,EAAA,GDyDiDE,CAAajI,EAAA8H,aAC9D,OAAA9H,IAAAU,EAGA,MAEA,cACA,aACA,aACA,UAAAV,WAAAU,IAAqCyG,EAASnH,EAAAkI,UAAAxH,EAAAwH,WAC9C,SAGA,MAEA,WACA,IAAWf,EAASnH,EAAAkI,UAAAxH,EAAAwH,WACpB,SAGA,MAEA,YACA,OAAAlI,EAAAmI,OAAAzH,EAAAyH,MAAAnI,EAAAoI,UAAA1H,EAAA0H,QAEA,aACA,GAAApI,EAAAqI,SAAA3H,EAAA2H,QAAArI,EAAAsI,SAAA5H,EAAA4H,QAAAtI,EAAAuI,aAAA7H,EAAA6H,YAAAvI,EAAAwI,YAAA9H,EAAA8H,WAAAxI,EAAAyI,SAAA/H,EAAA+H,QAAAzI,EAAA0I,UAAAhI,EAAAgI,QACA,SAQA,IAFA,IAAAxF,EAAAqE,EAAAlH,OAAA,EAEA6C,GAAA,IACA,GAAAqE,EAAArE,KAAAlD,EACA,OAAAwH,EAAAtE,KAAAxC,EAGAwC,GAAA,EAGA,OAAA0E,GACA,UACA,OAAA5H,EAAA2I,OAAAjI,EAAAiI,MAIAvB,EAAApH,EAAA4I,UAAAlI,EAAAkI,UAAArB,EAAAsB,OAAA,CAAA7I,IAAAwH,EAAAqB,OAAA,CAAAnI,KAEA,UACA,OAAAV,EAAA2I,OAAAjI,EAAAiI,MAIAvB,EAAApH,EAAA8I,SAAApI,EAAAoI,SAAAvB,EAAAsB,OAAA,CAAA7I,IAAAwH,EAAAqB,OAAA,CAAAnI,KAEA,gBACA,YACA,aACA,cACA,aACA,aACA,WACA,YACA,aACA,gBACA,iBACA,wBACA,iBACA,kBACA,iBACA,kBACA,mBACA,mBACA,kBACA,MAEA,QAEA,SAGA,IAAAqI,EAAc5C,EAAInG,GAElB,GAAA+I,EAAA1I,SAAuB8F,EAAIzF,GAAAL,OAC3B,SAGA,IAAA2I,EAAAzB,EAAAsB,OAAA,CAAA7I,IACAiJ,EAAAzB,EAAAqB,OAAA,CAAAnI,IAGA,IAFAwC,EAAA6F,EAAA1I,OAAA,EAEA6C,GAAA,IACA,IAAAuD,EAAAsC,EAAA7F,GAEA,IAAUuC,EAAIgB,EAAA/F,KAAAgH,EAAAhH,EAAA+F,GAAAzG,EAAAyG,GAAAuC,EAAAC,GACd,SAGA/F,GAAA,EAGA,SExIA,IAMegG,EAJf1I,EAAO,SAAAR,EAAAU,GACP,OAASgH,EAAO1H,EAAAU,EAAA,SC9BD,SAAAyI,EAAAlE,EAAAjF,EAAAkD,GACf,IAAAkG,EAAAlD,EAEA,uBAAAjB,EAAAoE,QACA,cAAArJ,GACA,aACA,OAAAA,EAAA,CAIA,IAFAoJ,EAAA,EAAApJ,EAEAkD,EAAA+B,EAAA5E,QAAA,CAGA,QAFA6F,EAAAjB,EAAA/B,KAEA,EAAAgD,IAAAkD,EACA,OAAAlG,EAGAA,GAAA,EAGA,SACS,GAAAlD,MAAA,CAET,KAAAkD,EAAA+B,EAAA5E,QAAA,CAGA,qBAFA6F,EAAAjB,EAAA/B,KAEAgD,MACA,OAAAhD,EAGAA,GAAA,EAGA,SAIA,OAAA+B,EAAAoE,QAAArJ,EAAAkD,GAGA,aACA,cACA,eACA,gBACA,OAAA+B,EAAAoE,QAAArJ,EAAAkD,GAEA,aACA,UAAAlD,EAEA,OAAAiF,EAAAoE,QAAArJ,EAAAkD,GAOA,KAAAA,EAAA+B,EAAA5E,QAAA,CACA,GAAQ6I,EAAMjE,EAAA/B,GAAAlD,GACd,OAAAkD,EAGAA,GAAA,EAGA,SChEe,SAAAoG,EAAAtJ,EAAAiF,GACf,OAASkE,EAAQlE,EAAAjF,EAAA,MCFF,SAAAuJ,EAAAC,GAGf,UAFAA,EAAAC,QAAA,cAAAA,QAAA,eACAA,QAAA,aAAAA,QAAA,aAAAA,QAAA,aAAAA,QAAA,aAAAA,QAAA,aAAAA,QAAA,aACAA,QAAA,gBCAA,IAAAC,EAAA,SAAA5I,GACA,OAAAA,EAAA,WAAAA,GASe6I,EANf,oBAAAC,KAAArH,UAAAsH,YAAA,SAAAC,GACA,OAAAA,EAAAD,eACC,SAAAC,GACD,OAAAA,EAAAC,iBAAA,IAAAL,EAAAI,EAAAE,cAAA,OAAAN,EAAAI,EAAAG,cAAA,IAAAP,EAAAI,EAAAI,eAAA,IAAAR,EAAAI,EAAAK,iBAAA,IAAAT,EAAAI,EAAAM,iBAAA,KAAAN,EAAAO,qBAAA,KAAAC,QAAA,GAAAtH,MAAA,UCVe,SAAAuH,EAAAvG,GACf,kBACA,OAAAA,EAAA1D,MAAAC,KAAAH,YCFe,SAAAoK,EAAAtK,EAAA+E,GAKf,IAJA,IAAA/B,EAAA,EACAO,EAAAwB,EAAA5E,OACA2B,EAAA,GAEAkB,EAAAO,GACAvD,EAAA+E,EAAA/B,MACAlB,IAAA3B,QAAA4E,EAAA/B,IAGAA,GAAA,EAGA,OAAAlB,ECbe,SAAAyI,EAAA9G,GACf,0BAAArB,OAAAC,UAAAC,SAAAC,KAAAkB,GCEA,IAAI+G,EAEJ,WACA,SAAAC,EAAA3G,EAAAlB,GACAvC,KAAAuC,KACAvC,KAAAyD,IAUA,OAPA2G,EAAApI,UAAA,qBAA2Ca,EAAOC,KAClDsH,EAAApI,UAAA,uBAA6Ca,EAAOpB,OAEpD2I,EAAApI,UAAA,8BAAAP,EAAAuD,GACA,OAAAhF,KAAAyD,EAAAuB,GAAAhF,KAAAuC,GAAA,qBAAAd,EAAAuD,GAAAvD,GAGA2I,EAbA,GC6CeC,EAbfpK,EAEAoC,EAAa,WDhBbpC,EAAO,SAAAwD,EAAAlB,GACP,WAAa4H,EAAO1G,EAAAlB,KCec,SAAAoE,EAAA2D,GAClC,OAASJ,EAASI,GAAe7F,EAAO,SAAAf,EAAAwC,GAKxC,OAJAS,EAAA2D,EAAApE,MACAxC,EAAAwC,GAAAoE,EAAApE,IAGAxC,GACG,GAAMkC,EAAI0E,IACXL,EAAOtD,EAAA2D,MCbMC,EAJftK,EAAO,SAAA0G,EAAA2D,GACP,OAASD,EAAOL,EAAWrD,GAAA2D,KCQ3B,IAMeE,EAJf9K,EAAO,SAAAoC,GACP,OCpCe,SAAA2I,EAAArH,EAAAsH,GACf,IAAAC,EAAA,SAAAC,GACA,IAAAC,EAAAH,EAAApC,OAAA,CAAAlF,IACA,OAAW2F,EAAS6B,EAAAC,GAAA,aAAAJ,EAAAG,EAAAC,IAIpBC,EAAA,SAAA1I,EAAAyD,GACA,OAAW7C,EAAI,SAAA+H,GACf,OAAa/B,EAAM+B,GAAA,KAAAJ,EAAAvI,EAAA2I,KACdlF,EAAApD,QAAAuI,SAGL,OAAAjJ,OAAAC,UAAAC,SAAAC,KAAAkB,IACA,yBACA,2CAAoDJ,EAAI2H,EAAAvH,GAAA6H,KAAA,WAExD,qBACA,UAAmBjI,EAAI2H,EAAAvH,GAAAkF,OAAAwC,EAAA1H,EAA8BmH,EAAM,SAAAQ,GAC3D,cAAAG,KAAAH,IACSnF,EAAIxC,MAAA6H,KAAA,UAEb,uBACA,wBAAA7H,EAAA,eAAAuH,EAAAvH,EAAAuE,WAAA,IAAAvE,EAAAnB,WAEA,oBACA,mBAAAkJ,MAAA/H,EAAAuE,WAAAgD,EAAAS,KAA8DpC,EAAOI,EAAYhG,KAAA,IAEjF,oBACA,aAEA,sBACA,wBAAAA,EAAA,cAAAuH,EAAAvH,EAAAuE,WAAA,MAAAvE,KAAA,SAAAA,EAAAnB,SAAA,IAEA,sBACA,wBAAAmB,EAAA,cAAAuH,EAAAvH,EAAAuE,WAAA,IAAgFqB,EAAM5F,GAEtF,yBACA,kBAEA,QACA,uBAAAA,EAAAnB,SAAA,CACA,IAAAoJ,EAAAjI,EAAAnB,WAEA,uBAAAoJ,EACA,OAAAA,EAIA,UAAeP,EAAA1H,EAAgBwC,EAAIxC,IAAA6H,KAAA,WDb1BR,CAAS3I,EAAA,ME1CH,SAAAwJ,GAAAlI,GACf,OAAAA,ECAe,IAAAmI,GAAA,oBAAAxJ,OAAAyJ,OAAAzJ,OAAAyJ,OCCA,SAAAC,GACf,SAAAA,EACA,UAAA5G,UAAA,8CAOA,IAJA,IAAA6G,EAAA3J,OAAA0J,GACA9I,EAAA,EACA7C,EAAAD,UAAAC,OAEA6C,EAAA7C,GAAA,CACA,IAAAgI,EAAAjI,UAAA8C,GAEA,SAAAmF,EACA,QAAA6D,KAAA7D,EACY5C,EAAIyG,EAAA7D,KAChB4D,EAAAC,GAAA7D,EAAA6D,IAKAhJ,GAAA,EAGA,OAAA+I,GCKeE,GANf3L,EAAO,SAAAiG,EAAApE,GACP,IAAAM,EAAA,GAEA,OADAA,EAAA8D,GAAApE,EACAM,ICrBAR,MAQA6F,OAOA1F,OCuBA,ICEe8J,GAZf5L,EAAO,SAAA6L,EAAAC,GACP,OAASrK,EAAMoK,EAAA,aACf,IAAAL,EAAA5L,UAAAiM,GAEA,SAAAL,GAA0BpF,EAAWoF,EAAAM,IACrC,OAAAN,EAAAM,GAAAhM,MAAA0L,EAAA7J,MAAAI,UAAAS,MAAAP,KAAArC,UAAA,EAAAiM,IAGA,UAAAjH,UAAwB2F,EAAQiB,GAAA,kCAAAM,EAAA,SCpBhC,ICFeC,GADfH,GAAO,iBCCQI,GADfJ,GAAO,iBClBPK,GAAA,oIAEAzE,OAAAzF,UAAAmK,KCHAC,EAAA7C,EAAA8C,EAAA,sBAAApG,IAAAmG,EAAA7C,EAAA8C,EAAA,sBAAAL,KAAAI,EAAA7C,EAAA8C,EAAA,sBAAAJ","file":"static/js/1.de309e20.chunk.js","sourcesContent":["export default function _isPlaceholder(a) {\n  return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;\n}","import _isPlaceholder from './_isPlaceholder';\n/**\n * Optimized internal one-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\n\nexport default function _curry1(fn) {\n  return function f1(a) {\n    if (arguments.length === 0 || _isPlaceholder(a)) {\n      return f1;\n    } else {\n      return fn.apply(this, arguments);\n    }\n  };\n}","import _curry1 from './_curry1';\nimport _isPlaceholder from './_isPlaceholder';\n/**\n * Optimized internal two-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\n\nexport default function _curry2(fn) {\n  return function f2(a, b) {\n    switch (arguments.length) {\n      case 0:\n        return f2;\n\n      case 1:\n        return _isPlaceholder(a) ? f2 : _curry1(function (_b) {\n          return fn(a, _b);\n        });\n\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {\n          return fn(_a, b);\n        }) : _isPlaceholder(b) ? _curry1(function (_b) {\n          return fn(a, _b);\n        }) : fn(a, b);\n    }\n  };\n}","export default function _arity(n, fn) {\n  /* eslint-disable no-unused-vars */\n  switch (n) {\n    case 0:\n      return function () {\n        return fn.apply(this, arguments);\n      };\n\n    case 1:\n      return function (a0) {\n        return fn.apply(this, arguments);\n      };\n\n    case 2:\n      return function (a0, a1) {\n        return fn.apply(this, arguments);\n      };\n\n    case 3:\n      return function (a0, a1, a2) {\n        return fn.apply(this, arguments);\n      };\n\n    case 4:\n      return function (a0, a1, a2, a3) {\n        return fn.apply(this, arguments);\n      };\n\n    case 5:\n      return function (a0, a1, a2, a3, a4) {\n        return fn.apply(this, arguments);\n      };\n\n    case 6:\n      return function (a0, a1, a2, a3, a4, a5) {\n        return fn.apply(this, arguments);\n      };\n\n    case 7:\n      return function (a0, a1, a2, a3, a4, a5, a6) {\n        return fn.apply(this, arguments);\n      };\n\n    case 8:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n        return fn.apply(this, arguments);\n      };\n\n    case 9:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n        return fn.apply(this, arguments);\n      };\n\n    case 10:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n        return fn.apply(this, arguments);\n      };\n\n    default:\n      throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n  }\n}","import _arity from './_arity';\nimport _isPlaceholder from './_isPlaceholder';\n/**\n * Internal curryN function.\n *\n * @private\n * @category Function\n * @param {Number} length The arity of the curried function.\n * @param {Array} received An array of arguments received thus far.\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\n\nexport default function _curryN(length, received, fn) {\n  return function () {\n    var combined = [];\n    var argsIdx = 0;\n    var left = length;\n    var combinedIdx = 0;\n\n    while (combinedIdx < received.length || argsIdx < arguments.length) {\n      var result;\n\n      if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {\n        result = received[combinedIdx];\n      } else {\n        result = arguments[argsIdx];\n        argsIdx += 1;\n      }\n\n      combined[combinedIdx] = result;\n\n      if (!_isPlaceholder(result)) {\n        left -= 1;\n      }\n\n      combinedIdx += 1;\n    }\n\n    return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));\n  };\n}","import _arity from './internal/_arity';\nimport _curry1 from './internal/_curry1';\nimport _curry2 from './internal/_curry2';\nimport _curryN from './internal/_curryN';\n/**\n * Returns a curried equivalent of the provided function, with the specified\n * arity. The curried function has two unusual capabilities. First, its\n * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.5.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curry\n * @example\n *\n *      var sumArgs = (...args) => R.sum(args);\n *\n *      var curriedAddFourNumbers = R.curryN(4, sumArgs);\n *      var f = curriedAddFourNumbers(1, 2);\n *      var g = f(3);\n *      g(4); //=> 10\n */\n\nvar curryN =\n/*#__PURE__*/\n_curry2(function curryN(length, fn) {\n  if (length === 1) {\n    return _curry1(fn);\n  }\n\n  return _arity(length, _curryN(length, [], fn));\n});\n\nexport default curryN;","import _concat from './internal/_concat';\nimport _curry3 from './internal/_curry3';\n/**\n * Applies a function to the value at the given index of an array, returning a\n * new copy of the array with the element at the given index replaced with the\n * result of the function application.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig (a -> a) -> Number -> [a] -> [a]\n * @param {Function} fn The function to apply.\n * @param {Number} idx The index.\n * @param {Array|Arguments} list An array-like object whose value\n *        at the supplied index will be replaced.\n * @return {Array} A copy of the supplied array-like object with\n *         the element at index `idx` replaced with the value\n *         returned by applying `fn` to the existing element.\n * @see R.update\n * @example\n *\n *      R.adjust(R.add(10), 1, [1, 2, 3]);     //=> [1, 12, 3]\n *      R.adjust(R.add(10))(1)([1, 2, 3]);     //=> [1, 12, 3]\n * @symb R.adjust(f, -1, [a, b]) = [a, f(b)]\n * @symb R.adjust(f, 0, [a, b]) = [f(a), b]\n */\n\nvar adjust =\n/*#__PURE__*/\n_curry3(function adjust(fn, idx, list) {\n  if (idx >= list.length || idx < -list.length) {\n    return list;\n  }\n\n  var start = idx < 0 ? list.length : 0;\n\n  var _idx = start + idx;\n\n  var _list = _concat(list);\n\n  _list[_idx] = fn(list[_idx]);\n  return _list;\n});\n\nexport default adjust;","/**\n * Tests whether or not an object is an array.\n *\n * @private\n * @param {*} val The object to test.\n * @return {Boolean} `true` if `val` is an array, `false` otherwise.\n * @example\n *\n *      _isArray([]); //=> true\n *      _isArray(null); //=> false\n *      _isArray({}); //=> false\n */\nexport default Array.isArray || function _isArray(val) {\n  return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';\n};","export default function _isTransformer(obj) {\n  return typeof obj['@@transducer/step'] === 'function';\n}","import _isArray from './_isArray';\nimport _isTransformer from './_isTransformer';\n/**\n * Returns a function that dispatches with different strategies based on the\n * object in list position (last argument). If it is an array, executes [fn].\n * Otherwise, if it has a function with one of the given method names, it will\n * execute that function (functor case). Otherwise, if it is a transformer,\n * uses transducer [xf] to return a new transformer (transducer case).\n * Otherwise, it will default to executing [fn].\n *\n * @private\n * @param {Array} methodNames properties to check for a custom implementation\n * @param {Function} xf transducer to initialize if object is transformer\n * @param {Function} fn default ramda implementation\n * @return {Function} A function that dispatches on object in list position\n */\n\nexport default function _dispatchable(methodNames, xf, fn) {\n  return function () {\n    if (arguments.length === 0) {\n      return fn();\n    }\n\n    var args = Array.prototype.slice.call(arguments, 0);\n    var obj = args.pop();\n\n    if (!_isArray(obj)) {\n      var idx = 0;\n\n      while (idx < methodNames.length) {\n        if (typeof obj[methodNames[idx]] === 'function') {\n          return obj[methodNames[idx]].apply(obj, args);\n        }\n\n        idx += 1;\n      }\n\n      if (_isTransformer(obj)) {\n        var transducer = xf.apply(null, args);\n        return transducer(obj);\n      }\n    }\n\n    return fn.apply(this, arguments);\n  };\n}","export default {\n  init: function init() {\n    return this.xf['@@transducer/init']();\n  },\n  result: function result(_result) {\n    return this.xf['@@transducer/result'](_result);\n  }\n};","export default function _map(fn, functor) {\n  var idx = 0;\n  var len = functor.length;\n  var result = Array(len);\n\n  while (idx < len) {\n    result[idx] = fn(functor[idx]);\n    idx += 1;\n  }\n\n  return result;\n}","export default function _isString(x) {\n  return Object.prototype.toString.call(x) === '[object String]';\n}","import _curry1 from './_curry1';\nimport _isArray from './_isArray';\nimport _isString from './_isString';\n/**\n * Tests whether or not an object is similar to an array.\n *\n * @private\n * @category Type\n * @category List\n * @sig * -> Boolean\n * @param {*} x The object to test.\n * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.\n * @example\n *\n *      _isArrayLike([]); //=> true\n *      _isArrayLike(true); //=> false\n *      _isArrayLike({}); //=> false\n *      _isArrayLike({length: 10}); //=> false\n *      _isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true\n */\n\nvar _isArrayLike =\n/*#__PURE__*/\n_curry1(function isArrayLike(x) {\n  if (_isArray(x)) {\n    return true;\n  }\n\n  if (!x) {\n    return false;\n  }\n\n  if (typeof x !== 'object') {\n    return false;\n  }\n\n  if (_isString(x)) {\n    return false;\n  }\n\n  if (x.nodeType === 1) {\n    return !!x.length;\n  }\n\n  if (x.length === 0) {\n    return true;\n  }\n\n  if (x.length > 0) {\n    return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);\n  }\n\n  return false;\n});\n\nexport default _isArrayLike;","var XWrap =\n/*#__PURE__*/\nfunction () {\n  function XWrap(fn) {\n    this.f = fn;\n  }\n\n  XWrap.prototype['@@transducer/init'] = function () {\n    throw new Error('init not implemented on XWrap');\n  };\n\n  XWrap.prototype['@@transducer/result'] = function (acc) {\n    return acc;\n  };\n\n  XWrap.prototype['@@transducer/step'] = function (acc, x) {\n    return this.f(acc, x);\n  };\n\n  return XWrap;\n}();\n\nexport default function _xwrap(fn) {\n  return new XWrap(fn);\n}","import _arity from './internal/_arity';\nimport _curry2 from './internal/_curry2';\n/**\n * Creates a function that is bound to a context.\n * Note: `R.bind` does not provide the additional argument-binding capabilities of\n * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Function\n * @category Object\n * @sig (* -> *) -> {*} -> (* -> *)\n * @param {Function} fn The function to bind to context\n * @param {Object} thisObj The context to bind `fn` to\n * @return {Function} A function that will execute in the context of `thisObj`.\n * @see R.partial\n * @example\n *\n *      var log = R.bind(console.log, console);\n *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}\n *      // logs {a: 2}\n * @symb R.bind(f, o)(a, b) = f.call(o, a, b)\n */\n\nvar bind =\n/*#__PURE__*/\n_curry2(function bind(fn, thisObj) {\n  return _arity(fn.length, function () {\n    return fn.apply(thisObj, arguments);\n  });\n});\n\nexport default bind;","import _isArrayLike from './_isArrayLike';\nimport _xwrap from './_xwrap';\nimport bind from '../bind';\n\nfunction _arrayReduce(xf, acc, list) {\n  var idx = 0;\n  var len = list.length;\n\n  while (idx < len) {\n    acc = xf['@@transducer/step'](acc, list[idx]);\n\n    if (acc && acc['@@transducer/reduced']) {\n      acc = acc['@@transducer/value'];\n      break;\n    }\n\n    idx += 1;\n  }\n\n  return xf['@@transducer/result'](acc);\n}\n\nfunction _iterableReduce(xf, acc, iter) {\n  var step = iter.next();\n\n  while (!step.done) {\n    acc = xf['@@transducer/step'](acc, step.value);\n\n    if (acc && acc['@@transducer/reduced']) {\n      acc = acc['@@transducer/value'];\n      break;\n    }\n\n    step = iter.next();\n  }\n\n  return xf['@@transducer/result'](acc);\n}\n\nfunction _methodReduce(xf, acc, obj, methodName) {\n  return xf['@@transducer/result'](obj[methodName](bind(xf['@@transducer/step'], xf), acc));\n}\n\nvar symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';\nexport default function _reduce(fn, acc, list) {\n  if (typeof fn === 'function') {\n    fn = _xwrap(fn);\n  }\n\n  if (_isArrayLike(list)) {\n    return _arrayReduce(fn, acc, list);\n  }\n\n  if (typeof list['fantasy-land/reduce'] === 'function') {\n    return _methodReduce(fn, acc, list, 'fantasy-land/reduce');\n  }\n\n  if (list[symIterator] != null) {\n    return _iterableReduce(fn, acc, list[symIterator]());\n  }\n\n  if (typeof list.next === 'function') {\n    return _iterableReduce(fn, acc, list);\n  }\n\n  if (typeof list.reduce === 'function') {\n    return _methodReduce(fn, acc, list, 'reduce');\n  }\n\n  throw new TypeError('reduce: list must be array or iterable');\n}","import _curry2 from './_curry2';\nimport _xfBase from './_xfBase';\n\nvar XMap =\n/*#__PURE__*/\nfunction () {\n  function XMap(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n\n  XMap.prototype['@@transducer/init'] = _xfBase.init;\n  XMap.prototype['@@transducer/result'] = _xfBase.result;\n\n  XMap.prototype['@@transducer/step'] = function (result, input) {\n    return this.xf['@@transducer/step'](result, this.f(input));\n  };\n\n  return XMap;\n}();\n\nvar _xmap =\n/*#__PURE__*/\n_curry2(function _xmap(f, xf) {\n  return new XMap(f, xf);\n});\n\nexport default _xmap;","export default function _has(prop, obj) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}","import _has from './_has';\nvar toString = Object.prototype.toString;\n\nvar _isArguments = function _isArguments() {\n  return toString.call(arguments) === '[object Arguments]' ? function _isArguments(x) {\n    return toString.call(x) === '[object Arguments]';\n  } : function _isArguments(x) {\n    return _has('callee', x);\n  };\n};\n\nexport default _isArguments;","import _curry1 from './internal/_curry1';\nimport _has from './internal/_has';\nimport _isArguments from './internal/_isArguments'; // cover IE < 9 keys issues\n\nvar hasEnumBug = !\n/*#__PURE__*/\n{\n  toString: null\n}.propertyIsEnumerable('toString');\nvar nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString']; // Safari bug\n\nvar hasArgsEnumBug =\n/*#__PURE__*/\nfunction () {\n  'use strict';\n\n  return arguments.propertyIsEnumerable('length');\n}();\n\nvar contains = function contains(list, item) {\n  var idx = 0;\n\n  while (idx < list.length) {\n    if (list[idx] === item) {\n      return true;\n    }\n\n    idx += 1;\n  }\n\n  return false;\n};\n/**\n * Returns a list containing the names of all the enumerable own properties of\n * the supplied object.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> [k]\n * @param {Object} obj The object to extract properties from\n * @return {Array} An array of the object's own properties.\n * @see R.keysIn, R.values\n * @example\n *\n *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']\n */\n\n\nvar _keys = typeof Object.keys === 'function' && !hasArgsEnumBug ? function keys(obj) {\n  return Object(obj) !== obj ? [] : Object.keys(obj);\n} : function keys(obj) {\n  if (Object(obj) !== obj) {\n    return [];\n  }\n\n  var prop, nIdx;\n  var ks = [];\n\n  var checkArgsLength = hasArgsEnumBug && _isArguments(obj);\n\n  for (prop in obj) {\n    if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {\n      ks[ks.length] = prop;\n    }\n  }\n\n  if (hasEnumBug) {\n    nIdx = nonEnumerableProps.length - 1;\n\n    while (nIdx >= 0) {\n      prop = nonEnumerableProps[nIdx];\n\n      if (_has(prop, obj) && !contains(ks, prop)) {\n        ks[ks.length] = prop;\n      }\n\n      nIdx -= 1;\n    }\n  }\n\n  return ks;\n};\n\nvar keys =\n/*#__PURE__*/\n_curry1(_keys);\n\nexport default keys;","import _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _map from './internal/_map';\nimport _reduce from './internal/_reduce';\nimport _xmap from './internal/_xmap';\nimport curryN from './curryN';\nimport keys from './keys';\n/**\n * Takes a function and\n * a [functor](https://github.com/fantasyland/fantasy-land#functor),\n * applies the function to each of the functor's values, and returns\n * a functor of the same shape.\n *\n * Ramda provides suitable `map` implementations for `Array` and `Object`,\n * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\n *\n * Dispatches to the `map` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * Also treats functions as functors and will compose them together.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => (a -> b) -> f a -> f b\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {Array} list The list to be iterated over.\n * @return {Array} The new list.\n * @see R.transduce, R.addIndex\n * @example\n *\n *      var double = x => x * 2;\n *\n *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]\n *\n *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\n * @symb R.map(f, [a, b]) = [f(a), f(b)]\n * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }\n * @symb R.map(f, functor_o) = functor_o.map(f)\n */\n\nvar map =\n/*#__PURE__*/\n_curry2(\n/*#__PURE__*/\n_dispatchable(['fantasy-land/map', 'map'], _xmap, function map(fn, functor) {\n  switch (Object.prototype.toString.call(functor)) {\n    case '[object Function]':\n      return curryN(functor.length, function () {\n        return fn.call(this, functor.apply(this, arguments));\n      });\n\n    case '[object Object]':\n      return _reduce(function (acc, key) {\n        acc[key] = fn(functor[key]);\n        return acc;\n      }, {}, keys(functor));\n\n    default:\n      return _map(fn, functor);\n  }\n}));\n\nexport default map;","/**\n * Determine if the passed argument is an integer.\n *\n * @private\n * @param {*} n\n * @category Type\n * @return {Boolean}\n */\nexport default Number.isInteger || function _isInteger(n) {\n  return n << 0 === n;\n};","export default function _isFunction(x) {\n  return Object.prototype.toString.call(x) === '[object Function]';\n}","import _curry1 from './internal/_curry1';\n/**\n * Gives a single-word string description of the (native) type of a value,\n * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\n * attempt to distinguish user Object types any further, reporting them all as\n * 'Object'.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Type\n * @sig (* -> {*}) -> String\n * @param {*} val The value to test\n * @return {String}\n * @example\n *\n *      R.type({}); //=> \"Object\"\n *      R.type(1); //=> \"Number\"\n *      R.type(false); //=> \"Boolean\"\n *      R.type('s'); //=> \"String\"\n *      R.type(null); //=> \"Null\"\n *      R.type([]); //=> \"Array\"\n *      R.type(/[A-z]/); //=> \"RegExp\"\n *      R.type(() => {}); //=> \"Function\"\n *      R.type(undefined); //=> \"Undefined\"\n */\n\nvar type =\n/*#__PURE__*/\n_curry1(function type(val) {\n  return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);\n});\n\nexport default type;","export default function _arrayFromIterator(iter) {\n  var list = [];\n  var next;\n\n  while (!(next = iter.next()).done) {\n    list.push(next.value);\n  }\n\n  return list;\n}","export default function _containsWith(pred, x, list) {\n  var idx = 0;\n  var len = list.length;\n\n  while (idx < len) {\n    if (pred(x, list[idx])) {\n      return true;\n    }\n\n    idx += 1;\n  }\n\n  return false;\n}","import _curry2 from './internal/_curry2';\n/**\n * Returns true if its arguments are identical, false otherwise. Values are\n * identical if they reference the same memory. `NaN` is identical to `NaN`;\n * `0` and `-0` are not identical.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      var o = {};\n *      R.identical(o, o); //=> true\n *      R.identical(1, 1); //=> true\n *      R.identical(1, '1'); //=> false\n *      R.identical([], []); //=> false\n *      R.identical(0, -0); //=> false\n *      R.identical(NaN, NaN); //=> true\n */\n\nvar identical =\n/*#__PURE__*/\n_curry2(function identical(a, b) {\n  // SameValue algorithm\n  if (a === b) {\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    return a !== 0 || 1 / a === 1 / b;\n  } else {\n    // Step 6.a: NaN == NaN\n    return a !== a && b !== b;\n  }\n});\n\nexport default identical;","import _arrayFromIterator from './_arrayFromIterator';\nimport _containsWith from './_containsWith';\nimport _functionName from './_functionName';\nimport _has from './_has';\nimport identical from '../identical';\nimport keys from '../keys';\nimport type from '../type';\n/**\n * private _uniqContentEquals function.\n * That function is checking equality of 2 iterator contents with 2 assumptions\n * - iterators lengths are the same\n * - iterators values are unique\n *\n * false-positive result will be returned for comparision of, e.g.\n * - [1,2,3] and [1,2,3,4]\n * - [1,1,1] and [1,2,3]\n * */\n\nfunction _uniqContentEquals(aIterator, bIterator, stackA, stackB) {\n  var a = _arrayFromIterator(aIterator);\n\n  var b = _arrayFromIterator(bIterator);\n\n  function eq(_a, _b) {\n    return _equals(_a, _b, stackA.slice(), stackB.slice());\n  } // if *a* array contains any element that is not included in *b*\n\n\n  return !_containsWith(function (b, aItem) {\n    return !_containsWith(eq, aItem, b);\n  }, b, a);\n}\n\nexport default function _equals(a, b, stackA, stackB) {\n  if (identical(a, b)) {\n    return true;\n  }\n\n  var typeA = type(a);\n\n  if (typeA !== type(b)) {\n    return false;\n  }\n\n  if (a == null || b == null) {\n    return false;\n  }\n\n  if (typeof a['fantasy-land/equals'] === 'function' || typeof b['fantasy-land/equals'] === 'function') {\n    return typeof a['fantasy-land/equals'] === 'function' && a['fantasy-land/equals'](b) && typeof b['fantasy-land/equals'] === 'function' && b['fantasy-land/equals'](a);\n  }\n\n  if (typeof a.equals === 'function' || typeof b.equals === 'function') {\n    return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);\n  }\n\n  switch (typeA) {\n    case 'Arguments':\n    case 'Array':\n    case 'Object':\n      if (typeof a.constructor === 'function' && _functionName(a.constructor) === 'Promise') {\n        return a === b;\n      }\n\n      break;\n\n    case 'Boolean':\n    case 'Number':\n    case 'String':\n      if (!(typeof a === typeof b && identical(a.valueOf(), b.valueOf()))) {\n        return false;\n      }\n\n      break;\n\n    case 'Date':\n      if (!identical(a.valueOf(), b.valueOf())) {\n        return false;\n      }\n\n      break;\n\n    case 'Error':\n      return a.name === b.name && a.message === b.message;\n\n    case 'RegExp':\n      if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {\n        return false;\n      }\n\n      break;\n  }\n\n  var idx = stackA.length - 1;\n\n  while (idx >= 0) {\n    if (stackA[idx] === a) {\n      return stackB[idx] === b;\n    }\n\n    idx -= 1;\n  }\n\n  switch (typeA) {\n    case 'Map':\n      if (a.size !== b.size) {\n        return false;\n      }\n\n      return _uniqContentEquals(a.entries(), b.entries(), stackA.concat([a]), stackB.concat([b]));\n\n    case 'Set':\n      if (a.size !== b.size) {\n        return false;\n      }\n\n      return _uniqContentEquals(a.values(), b.values(), stackA.concat([a]), stackB.concat([b]));\n\n    case 'Arguments':\n    case 'Array':\n    case 'Object':\n    case 'Boolean':\n    case 'Number':\n    case 'String':\n    case 'Date':\n    case 'Error':\n    case 'RegExp':\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'ArrayBuffer':\n      break;\n\n    default:\n      // Values of other types are only equal if identical.\n      return false;\n  }\n\n  var keysA = keys(a);\n\n  if (keysA.length !== keys(b).length) {\n    return false;\n  }\n\n  var extendedStackA = stackA.concat([a]);\n  var extendedStackB = stackB.concat([b]);\n  idx = keysA.length - 1;\n\n  while (idx >= 0) {\n    var key = keysA[idx];\n\n    if (!(_has(key, b) && _equals(b[key], a[key], extendedStackA, extendedStackB))) {\n      return false;\n    }\n\n    idx -= 1;\n  }\n\n  return true;\n}","export default function _functionName(f) {\n  // String(x => x) evaluates to \"x => x\", so the pattern may not match.\n  var match = String(f).match(/^function (\\w*)/);\n  return match == null ? '' : match[1];\n}","import _curry2 from './internal/_curry2';\nimport _equals from './internal/_equals';\n/**\n * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n * cyclical data structures.\n *\n * Dispatches symmetrically to the `equals` methods of both arguments, if\n * present.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      R.equals(1, 1); //=> true\n *      R.equals(1, '1'); //=> false\n *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n *\n *      var a = {}; a.v = a;\n *      var b = {}; b.v = b;\n *      R.equals(a, b); //=> true\n */\n\nvar equals =\n/*#__PURE__*/\n_curry2(function equals(a, b) {\n  return _equals(a, b, [], []);\n});\n\nexport default equals;","import equals from '../equals';\nexport default function _indexOf(list, a, idx) {\n  var inf, item; // Array.prototype.indexOf doesn't exist below IE9\n\n  if (typeof list.indexOf === 'function') {\n    switch (typeof a) {\n      case 'number':\n        if (a === 0) {\n          // manually crawl the list to distinguish between +0 and -0\n          inf = 1 / a;\n\n          while (idx < list.length) {\n            item = list[idx];\n\n            if (item === 0 && 1 / item === inf) {\n              return idx;\n            }\n\n            idx += 1;\n          }\n\n          return -1;\n        } else if (a !== a) {\n          // NaN\n          while (idx < list.length) {\n            item = list[idx];\n\n            if (typeof item === 'number' && item !== item) {\n              return idx;\n            }\n\n            idx += 1;\n          }\n\n          return -1;\n        } // non-zero numbers can utilise Set\n\n\n        return list.indexOf(a, idx);\n      // all these types can utilise Set\n\n      case 'string':\n      case 'boolean':\n      case 'function':\n      case 'undefined':\n        return list.indexOf(a, idx);\n\n      case 'object':\n        if (a === null) {\n          // null can utilise Set\n          return list.indexOf(a, idx);\n        }\n\n    }\n  } // anything else not covered above, defer to R.equals\n\n\n  while (idx < list.length) {\n    if (equals(list[idx], a)) {\n      return idx;\n    }\n\n    idx += 1;\n  }\n\n  return -1;\n}","import _indexOf from './_indexOf';\nexport default function _contains(a, list) {\n  return _indexOf(list, a, 0) >= 0;\n}","export default function _quote(s) {\n  var escaped = s.replace(/\\\\/g, '\\\\\\\\').replace(/[\\b]/g, '\\\\b') // \\b matches word boundary; [\\b] matches backspace\n  .replace(/\\f/g, '\\\\f').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/\\t/g, '\\\\t').replace(/\\v/g, '\\\\v').replace(/\\0/g, '\\\\0');\n  return '\"' + escaped.replace(/\"/g, '\\\\\"') + '\"';\n}","/**\n * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.\n */\nvar pad = function pad(n) {\n  return (n < 10 ? '0' : '') + n;\n};\n\nvar _toISOString = typeof Date.prototype.toISOString === 'function' ? function _toISOString(d) {\n  return d.toISOString();\n} : function _toISOString(d) {\n  return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + '.' + (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z';\n};\n\nexport default _toISOString;","export default function _complement(f) {\n  return function () {\n    return !f.apply(this, arguments);\n  };\n}","export default function _filter(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n\n  while (idx < len) {\n    if (fn(list[idx])) {\n      result[result.length] = list[idx];\n    }\n\n    idx += 1;\n  }\n\n  return result;\n}","export default function _isObject(x) {\n  return Object.prototype.toString.call(x) === '[object Object]';\n}","import _curry2 from './_curry2';\nimport _xfBase from './_xfBase';\n\nvar XFilter =\n/*#__PURE__*/\nfunction () {\n  function XFilter(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n\n  XFilter.prototype['@@transducer/init'] = _xfBase.init;\n  XFilter.prototype['@@transducer/result'] = _xfBase.result;\n\n  XFilter.prototype['@@transducer/step'] = function (result, input) {\n    return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;\n  };\n\n  return XFilter;\n}();\n\nvar _xfilter =\n/*#__PURE__*/\n_curry2(function _xfilter(f, xf) {\n  return new XFilter(f, xf);\n});\n\nexport default _xfilter;","import _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _filter from './internal/_filter';\nimport _isObject from './internal/_isObject';\nimport _reduce from './internal/_reduce';\nimport _xfilter from './internal/_xfilter';\nimport keys from './keys';\n/**\n * Takes a predicate and a `Filterable`, and returns a new filterable of the\n * same type containing the members of the given filterable which satisfy the\n * given predicate. Filterable objects include plain objects or any object\n * that has a filter method such as `Array`.\n *\n * Dispatches to the `filter` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array} Filterable\n * @see R.reject, R.transduce, R.addIndex\n * @example\n *\n *      var isEven = n => n % 2 === 0;\n *\n *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */\n\nvar filter =\n/*#__PURE__*/\n_curry2(\n/*#__PURE__*/\n_dispatchable(['filter'], _xfilter, function (pred, filterable) {\n  return _isObject(filterable) ? _reduce(function (acc, key) {\n    if (pred(filterable[key])) {\n      acc[key] = filterable[key];\n    }\n\n    return acc;\n  }, {}, keys(filterable)) : // else\n  _filter(pred, filterable);\n}));\n\nexport default filter;","import _complement from './internal/_complement';\nimport _curry2 from './internal/_curry2';\nimport filter from './filter';\n/**\n * The complement of [`filter`](#filter).\n *\n * Acts as a transducer if a transformer is given in list position. Filterable\n * objects include plain objects or any object that has a filter method such\n * as `Array`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array}\n * @see R.filter, R.transduce, R.addIndex\n * @example\n *\n *      var isOdd = (n) => n % 2 === 1;\n *\n *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */\n\nvar reject =\n/*#__PURE__*/\n_curry2(function reject(pred, filterable) {\n  return filter(_complement(pred), filterable);\n});\n\nexport default reject;","import _curry1 from './internal/_curry1';\nimport _toString from './internal/_toString';\n/**\n * Returns the string representation of the given value. `eval`'ing the output\n * should result in a value equivalent to the input value. Many of the built-in\n * `toString` methods do not satisfy this requirement.\n *\n * If the given value is an `[object Object]` with a `toString` method other\n * than `Object.prototype.toString`, this method is invoked with no arguments\n * to produce the return value. This means user-defined constructor functions\n * can provide a suitable `toString` method. For example:\n *\n *     function Point(x, y) {\n *       this.x = x;\n *       this.y = y;\n *     }\n *\n *     Point.prototype.toString = function() {\n *       return 'new Point(' + this.x + ', ' + this.y + ')';\n *     };\n *\n *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category String\n * @sig * -> String\n * @param {*} val\n * @return {String}\n * @example\n *\n *      R.toString(42); //=> '42'\n *      R.toString('abc'); //=> '\"abc\"'\n *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'\n *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{\"bar\": 2, \"baz\": 3, \"foo\": 1}'\n *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date(\"2001-02-03T04:05:06.000Z\")'\n */\n\nvar toString =\n/*#__PURE__*/\n_curry1(function toString(val) {\n  return _toString(val, []);\n});\n\nexport default toString;","import _contains from './_contains';\nimport _map from './_map';\nimport _quote from './_quote';\nimport _toISOString from './_toISOString';\nimport keys from '../keys';\nimport reject from '../reject';\nexport default function _toString(x, seen) {\n  var recur = function recur(y) {\n    var xs = seen.concat([x]);\n    return _contains(y, xs) ? '<Circular>' : _toString(y, xs);\n  }; //  mapPairs :: (Object, [String]) -> [String]\n\n\n  var mapPairs = function mapPairs(obj, keys) {\n    return _map(function (k) {\n      return _quote(k) + ': ' + recur(obj[k]);\n    }, keys.slice().sort());\n  };\n\n  switch (Object.prototype.toString.call(x)) {\n    case '[object Arguments]':\n      return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';\n\n    case '[object Array]':\n      return '[' + _map(recur, x).concat(mapPairs(x, reject(function (k) {\n        return /^\\d+$/.test(k);\n      }, keys(x)))).join(', ') + ']';\n\n    case '[object Boolean]':\n      return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();\n\n    case '[object Date]':\n      return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';\n\n    case '[object Null]':\n      return 'null';\n\n    case '[object Number]':\n      return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);\n\n    case '[object String]':\n      return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);\n\n    case '[object Undefined]':\n      return 'undefined';\n\n    default:\n      if (typeof x.toString === 'function') {\n        var repr = x.toString();\n\n        if (repr !== '[object Object]') {\n          return repr;\n        }\n      }\n\n      return '{' + mapPairs(x, keys(x)).join(', ') + '}';\n  }\n}","export default function _identity(x) {\n  return x;\n}","import _objectAssign from './_objectAssign';\nexport default typeof Object.assign === 'function' ? Object.assign : _objectAssign;","import _has from './_has'; // Based on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\nexport default function _objectAssign(target) {\n  if (target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  var output = Object(target);\n  var idx = 1;\n  var length = arguments.length;\n\n  while (idx < length) {\n    var source = arguments[idx];\n\n    if (source != null) {\n      for (var nextKey in source) {\n        if (_has(nextKey, source)) {\n          output[nextKey] = source[nextKey];\n        }\n      }\n    }\n\n    idx += 1;\n  }\n\n  return output;\n}","import _curry2 from './internal/_curry2';\n/**\n * Creates an object containing a single key:value pair.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Object\n * @sig String -> a -> {String:a}\n * @param {String} key\n * @param {*} val\n * @return {Object}\n * @see R.pair\n * @example\n *\n *      var matchPhrases = R.compose(\n *        R.objOf('must'),\n *        R.map(R.objOf('match_phrase'))\n *      );\n *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}\n */\n\nvar objOf =\n/*#__PURE__*/\n_curry2(function objOf(key, val) {\n  var obj = {};\n  obj[key] = val;\n  return obj;\n});\n\nexport default objOf;","import _assign from './_assign';\nimport _identity from './_identity';\nimport _isArrayLike from './_isArrayLike';\nimport _isTransformer from './_isTransformer';\nimport objOf from '../objOf';\nvar _stepCatArray = {\n  '@@transducer/init': Array,\n  '@@transducer/step': function transducerStep(xs, x) {\n    xs.push(x);\n    return xs;\n  },\n  '@@transducer/result': _identity\n};\nvar _stepCatString = {\n  '@@transducer/init': String,\n  '@@transducer/step': function transducerStep(a, b) {\n    return a + b;\n  },\n  '@@transducer/result': _identity\n};\nvar _stepCatObject = {\n  '@@transducer/init': Object,\n  '@@transducer/step': function transducerStep(result, input) {\n    return _assign(result, _isArrayLike(input) ? objOf(input[0], input[1]) : input);\n  },\n  '@@transducer/result': _identity\n};\nexport default function _stepCat(obj) {\n  if (_isTransformer(obj)) {\n    return obj;\n  }\n\n  if (_isArrayLike(obj)) {\n    return _stepCatArray;\n  }\n\n  if (typeof obj === 'string') {\n    return _stepCatString;\n  }\n\n  if (typeof obj === 'object') {\n    return _stepCatObject;\n  }\n\n  throw new Error('Cannot create transformer for ' + obj);\n}","import _clone from './internal/_clone';\nimport _curry3 from './internal/_curry3';\nimport _isTransformer from './internal/_isTransformer';\nimport _reduce from './internal/_reduce';\nimport _stepCat from './internal/_stepCat';\n/**\n * Transforms the items of the list with the transducer and appends the\n * transformed items to the accumulator using an appropriate iterator function\n * based on the accumulator type.\n *\n * The accumulator can be an array, string, object or a transformer. Iterated\n * items will be appended to arrays and concatenated to strings. Objects will\n * be merged directly or 2-item arrays will be merged as key, value pairs.\n *\n * The accumulator can also be a transformer object that provides a 2-arity\n * reducing iterator function, step, 0-arity initial value function, init, and\n * 1-arity result extraction function result. The step function is used as the\n * iterator function in reduce. The result function is used to convert the\n * final accumulator into the return type and in most cases is R.identity. The\n * init function is used to provide the initial accumulator.\n *\n * The iteration is performed with [`R.reduce`](#reduce) after initializing the\n * transducer.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig a -> (b -> b) -> [c] -> a\n * @param {*} acc The initial accumulator value.\n * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @example\n *\n *      var numbers = [1, 2, 3, 4];\n *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n *\n *      R.into([], transducer, numbers); //=> [2, 3]\n *\n *      var intoArray = R.into([]);\n *      intoArray(transducer, numbers); //=> [2, 3]\n */\n\nvar into =\n/*#__PURE__*/\n_curry3(function into(acc, xf, list) {\n  return _isTransformer(acc) ? _reduce(xf(acc), acc['@@transducer/init'](), list) : _reduce(xf(_stepCat(acc)), _clone(acc, [], [], false), list);\n});\n\nexport default into;","import _curry2 from './internal/_curry2';\nimport _isFunction from './internal/_isFunction';\nimport curryN from './curryN';\nimport toString from './toString';\n/**\n * Turns a named method with a specified arity into a function that can be\n * called directly supplied with arguments and a target object.\n *\n * The returned function is curried and accepts `arity + 1` parameters where\n * the final parameter is the target object.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)\n * @param {Number} arity Number of arguments the returned function should take\n *        before the target object.\n * @param {String} method Name of the method to call.\n * @return {Function} A new curried function.\n * @see R.construct\n * @example\n *\n *      var sliceFrom = R.invoker(1, 'slice');\n *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'\n *      var sliceFrom6 = R.invoker(2, 'slice')(6);\n *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'\n * @symb R.invoker(0, 'method')(o) = o['method']()\n * @symb R.invoker(1, 'method')(a, o) = o['method'](a)\n * @symb R.invoker(2, 'method')(a, b, o) = o['method'](a, b)\n */\n\nvar invoker =\n/*#__PURE__*/\n_curry2(function invoker(arity, method) {\n  return curryN(arity + 1, function () {\n    var target = arguments[arity];\n\n    if (target != null && _isFunction(target[method])) {\n      return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));\n    }\n\n    throw new TypeError(toString(target) + ' does not have a method named \"' + method + '\"');\n  });\n});\n\nexport default invoker;","import _cloneRegExp from './internal/_cloneRegExp';\nimport _curry2 from './internal/_curry2';\nimport _isRegExp from './internal/_isRegExp';\nimport toString from './toString';\n/**\n * Determines whether a given string matches a given regular expression.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category String\n * @sig RegExp -> String -> Boolean\n * @param {RegExp} pattern\n * @param {String} str\n * @return {Boolean}\n * @see R.match\n * @example\n *\n *      R.test(/^x/, 'xyz'); //=> true\n *      R.test(/^y/, 'xyz'); //=> false\n */\n\nvar test =\n/*#__PURE__*/\n_curry2(function test(pattern, str) {\n  if (!_isRegExp(pattern)) {\n    throw new TypeError('‘test’ requires a value of type RegExp as its first argument; received ' + toString(pattern));\n  }\n\n  return _cloneRegExp(pattern).test(str);\n});\n\nexport default test;","import invoker from './invoker';\n/**\n * The lower case version of a string.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to lower case.\n * @return {String} The lower case version of `str`.\n * @see R.toUpper\n * @example\n *\n *      R.toLower('XYZ'); //=> 'xyz'\n */\n\nvar toLower =\n/*#__PURE__*/\ninvoker(0, 'toLowerCase');\nexport default toLower;","import invoker from './invoker';\n/**\n * The upper case version of a string.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to upper case.\n * @return {String} The upper case version of `str`.\n * @see R.toLower\n * @example\n *\n *      R.toUpper('abc'); //=> 'ABC'\n */\n\nvar toUpper =\n/*#__PURE__*/\ninvoker(0, 'toUpperCase');\nexport default toUpper;","import _curry1 from './internal/_curry1';\nvar ws = \"\\t\\n\\x0B\\f\\r \\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\" + \"\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\" + \"\\u2029\\uFEFF\";\nvar zeroWidth = \"\\u200B\";\nvar hasProtoTrim = typeof String.prototype.trim === 'function';\n/**\n * Removes (strips) whitespace from both ends of the string.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to trim.\n * @return {String} Trimmed version of `str`.\n * @example\n *\n *      R.trim('   xyz  '); //=> 'xyz'\n *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']\n */\n\nvar _trim = !hasProtoTrim ||\n/*#__PURE__*/\nws.trim() || !\n/*#__PURE__*/\nzeroWidth.trim() ? function trim(str) {\n  var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');\n  var endRx = new RegExp('[' + ws + '][' + ws + ']*$');\n  return str.replace(beginRx, '').replace(endRx, '');\n} : function trim(str) {\n  return str.trim();\n};\n\nvar trim =\n/*#__PURE__*/\n_curry1(_trim);\n\nexport default trim;","export { default as F } from './F';\nexport { default as T } from './T';\nexport { default as __ } from './__';\nexport { default as add } from './add';\nexport { default as addIndex } from './addIndex';\nexport { default as adjust } from './adjust';\nexport { default as all } from './all';\nexport { default as allPass } from './allPass';\nexport { default as always } from './always';\nexport { default as and } from './and';\nexport { default as any } from './any';\nexport { default as anyPass } from './anyPass';\nexport { default as ap } from './ap';\nexport { default as aperture } from './aperture';\nexport { default as append } from './append';\nexport { default as apply } from './apply';\nexport { default as applySpec } from './applySpec';\nexport { default as applyTo } from './applyTo';\nexport { default as ascend } from './ascend';\nexport { default as assoc } from './assoc';\nexport { default as assocPath } from './assocPath';\nexport { default as binary } from './binary';\nexport { default as bind } from './bind';\nexport { default as both } from './both';\nexport { default as call } from './call';\nexport { default as chain } from './chain';\nexport { default as clamp } from './clamp';\nexport { default as clone } from './clone';\nexport { default as comparator } from './comparator';\nexport { default as complement } from './complement';\nexport { default as compose } from './compose';\nexport { default as composeK } from './composeK';\nexport { default as composeP } from './composeP';\nexport { default as concat } from './concat';\nexport { default as cond } from './cond';\nexport { default as construct } from './construct';\nexport { default as constructN } from './constructN';\nexport { default as contains } from './contains';\nexport { default as converge } from './converge';\nexport { default as countBy } from './countBy';\nexport { default as curry } from './curry';\nexport { default as curryN } from './curryN';\nexport { default as dec } from './dec';\nexport { default as defaultTo } from './defaultTo';\nexport { default as descend } from './descend';\nexport { default as difference } from './difference';\nexport { default as differenceWith } from './differenceWith';\nexport { default as dissoc } from './dissoc';\nexport { default as dissocPath } from './dissocPath';\nexport { default as divide } from './divide';\nexport { default as drop } from './drop';\nexport { default as dropLast } from './dropLast';\nexport { default as dropLastWhile } from './dropLastWhile';\nexport { default as dropRepeats } from './dropRepeats';\nexport { default as dropRepeatsWith } from './dropRepeatsWith';\nexport { default as dropWhile } from './dropWhile';\nexport { default as either } from './either';\nexport { default as empty } from './empty';\nexport { default as endsWith } from './endsWith';\nexport { default as eqBy } from './eqBy';\nexport { default as eqProps } from './eqProps';\nexport { default as equals } from './equals';\nexport { default as evolve } from './evolve';\nexport { default as filter } from './filter';\nexport { default as find } from './find';\nexport { default as findIndex } from './findIndex';\nexport { default as findLast } from './findLast';\nexport { default as findLastIndex } from './findLastIndex';\nexport { default as flatten } from './flatten';\nexport { default as flip } from './flip';\nexport { default as forEach } from './forEach';\nexport { default as forEachObjIndexed } from './forEachObjIndexed';\nexport { default as fromPairs } from './fromPairs';\nexport { default as groupBy } from './groupBy';\nexport { default as groupWith } from './groupWith';\nexport { default as gt } from './gt';\nexport { default as gte } from './gte';\nexport { default as has } from './has';\nexport { default as hasIn } from './hasIn';\nexport { default as head } from './head';\nexport { default as identical } from './identical';\nexport { default as identity } from './identity';\nexport { default as ifElse } from './ifElse';\nexport { default as inc } from './inc';\nexport { default as indexBy } from './indexBy';\nexport { default as indexOf } from './indexOf';\nexport { default as init } from './init';\nexport { default as innerJoin } from './innerJoin';\nexport { default as insert } from './insert';\nexport { default as insertAll } from './insertAll';\nexport { default as intersection } from './intersection';\nexport { default as intersperse } from './intersperse';\nexport { default as into } from './into';\nexport { default as invert } from './invert';\nexport { default as invertObj } from './invertObj';\nexport { default as invoker } from './invoker';\nexport { default as is } from './is';\nexport { default as isEmpty } from './isEmpty';\nexport { default as isNil } from './isNil';\nexport { default as join } from './join';\nexport { default as juxt } from './juxt';\nexport { default as keys } from './keys';\nexport { default as keysIn } from './keysIn';\nexport { default as last } from './last';\nexport { default as lastIndexOf } from './lastIndexOf';\nexport { default as length } from './length';\nexport { default as lens } from './lens';\nexport { default as lensIndex } from './lensIndex';\nexport { default as lensPath } from './lensPath';\nexport { default as lensProp } from './lensProp';\nexport { default as lift } from './lift';\nexport { default as liftN } from './liftN';\nexport { default as lt } from './lt';\nexport { default as lte } from './lte';\nexport { default as map } from './map';\nexport { default as mapAccum } from './mapAccum';\nexport { default as mapAccumRight } from './mapAccumRight';\nexport { default as mapObjIndexed } from './mapObjIndexed';\nexport { default as match } from './match';\nexport { default as mathMod } from './mathMod';\nexport { default as max } from './max';\nexport { default as maxBy } from './maxBy';\nexport { default as mean } from './mean';\nexport { default as median } from './median';\nexport { default as memoize } from './memoize';\nexport { default as memoizeWith } from './memoizeWith';\nexport { default as merge } from './merge';\nexport { default as mergeAll } from './mergeAll';\nexport { default as mergeDeepLeft } from './mergeDeepLeft';\nexport { default as mergeDeepRight } from './mergeDeepRight';\nexport { default as mergeDeepWith } from './mergeDeepWith';\nexport { default as mergeDeepWithKey } from './mergeDeepWithKey';\nexport { default as mergeWith } from './mergeWith';\nexport { default as mergeWithKey } from './mergeWithKey';\nexport { default as min } from './min';\nexport { default as minBy } from './minBy';\nexport { default as modulo } from './modulo';\nexport { default as multiply } from './multiply';\nexport { default as nAry } from './nAry';\nexport { default as negate } from './negate';\nexport { default as none } from './none';\nexport { default as not } from './not';\nexport { default as nth } from './nth';\nexport { default as nthArg } from './nthArg';\nexport { default as o } from './o';\nexport { default as objOf } from './objOf';\nexport { default as of } from './of';\nexport { default as omit } from './omit';\nexport { default as once } from './once';\nexport { default as or } from './or';\nexport { default as over } from './over';\nexport { default as pair } from './pair';\nexport { default as partial } from './partial';\nexport { default as partialRight } from './partialRight';\nexport { default as partition } from './partition';\nexport { default as path } from './path';\nexport { default as pathEq } from './pathEq';\nexport { default as pathOr } from './pathOr';\nexport { default as pathSatisfies } from './pathSatisfies';\nexport { default as pick } from './pick';\nexport { default as pickAll } from './pickAll';\nexport { default as pickBy } from './pickBy';\nexport { default as pipe } from './pipe';\nexport { default as pipeK } from './pipeK';\nexport { default as pipeP } from './pipeP';\nexport { default as pluck } from './pluck';\nexport { default as prepend } from './prepend';\nexport { default as product } from './product';\nexport { default as project } from './project';\nexport { default as prop } from './prop';\nexport { default as propEq } from './propEq';\nexport { default as propIs } from './propIs';\nexport { default as propOr } from './propOr';\nexport { default as propSatisfies } from './propSatisfies';\nexport { default as props } from './props';\nexport { default as range } from './range';\nexport { default as reduce } from './reduce';\nexport { default as reduceBy } from './reduceBy';\nexport { default as reduceRight } from './reduceRight';\nexport { default as reduceWhile } from './reduceWhile';\nexport { default as reduced } from './reduced';\nexport { default as reject } from './reject';\nexport { default as remove } from './remove';\nexport { default as repeat } from './repeat';\nexport { default as replace } from './replace';\nexport { default as reverse } from './reverse';\nexport { default as scan } from './scan';\nexport { default as sequence } from './sequence';\nexport { default as set } from './set';\nexport { default as slice } from './slice';\nexport { default as sort } from './sort';\nexport { default as sortBy } from './sortBy';\nexport { default as sortWith } from './sortWith';\nexport { default as split } from './split';\nexport { default as splitAt } from './splitAt';\nexport { default as splitEvery } from './splitEvery';\nexport { default as splitWhen } from './splitWhen';\nexport { default as startsWith } from './startsWith';\nexport { default as subtract } from './subtract';\nexport { default as sum } from './sum';\nexport { default as symmetricDifference } from './symmetricDifference';\nexport { default as symmetricDifferenceWith } from './symmetricDifferenceWith';\nexport { default as tail } from './tail';\nexport { default as take } from './take';\nexport { default as takeLast } from './takeLast';\nexport { default as takeLastWhile } from './takeLastWhile';\nexport { default as takeWhile } from './takeWhile';\nexport { default as tap } from './tap';\nexport { default as test } from './test';\nexport { default as times } from './times';\nexport { default as toLower } from './toLower';\nexport { default as toPairs } from './toPairs';\nexport { default as toPairsIn } from './toPairsIn';\nexport { default as toString } from './toString';\nexport { default as toUpper } from './toUpper';\nexport { default as transduce } from './transduce';\nexport { default as transpose } from './transpose';\nexport { default as traverse } from './traverse';\nexport { default as trim } from './trim';\nexport { default as tryCatch } from './tryCatch';\nexport { default as type } from './type';\nexport { default as unapply } from './unapply';\nexport { default as unary } from './unary';\nexport { default as uncurryN } from './uncurryN';\nexport { default as unfold } from './unfold';\nexport { default as union } from './union';\nexport { default as unionWith } from './unionWith';\nexport { default as uniq } from './uniq';\nexport { default as uniqBy } from './uniqBy';\nexport { default as uniqWith } from './uniqWith';\nexport { default as unless } from './unless';\nexport { default as unnest } from './unnest';\nexport { default as until } from './until';\nexport { default as update } from './update';\nexport { default as useWith } from './useWith';\nexport { default as values } from './values';\nexport { default as valuesIn } from './valuesIn';\nexport { default as view } from './view';\nexport { default as when } from './when';\nexport { default as where } from './where';\nexport { default as whereEq } from './whereEq';\nexport { default as without } from './without';\nexport { default as xprod } from './xprod';\nexport { default as zip } from './zip';\nexport { default as zipObj } from './zipObj';\nexport { default as zipWith } from './zipWith';"],"sourceRoot":""}