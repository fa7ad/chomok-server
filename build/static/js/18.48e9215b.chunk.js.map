{"version":3,"sources":["pages/Login.js"],"names":["Wrapper","styled","_templateObject","form","css","_templateObject2","Login","state","username","password","progress","prefixStyle","color","handleErr","e","console","error","_this","setState","setTimeout","doLogin","preventDefault","props","validateFields","err","values","uname","toLowerCase","fetch","method","headers","Content-Type","body","JSON","stringify","then","r","json","_ref","ok","Error","navigate","catch","getFieldDecorator","this","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","style","antd__WEBPACK_IMPORTED_MODULE_7__","onSubmit","className","Item","rules","required","message","antd__WEBPACK_IMPORTED_MODULE_8__","prefix","antd__WEBPACK_IMPORTED_MODULE_9__","type","placeholder","antd__WEBPACK_IMPORTED_MODULE_10__","Group","size","htmlType","href","React","PureComponent","Form","create"],"mappings":"qvBAOA,IAAMA,EAAUC,YAAO,MAAPA,CAAHC,KAOPC,EAAOC,YAAHC,KAgBJC,6MACJC,MAAQ,CACNC,SAAU,GACVC,SAAU,GACVC,SAAU,UAGZC,YAAc,CACZC,MAAO,yBAmDTC,UAAY,SAAAC,GACVC,QAAQC,MAAMF,GACdG,EAAKC,SAAS,CAAER,SAAU,UAC1BS,WAAW,WACTF,EAAKC,SAAS,CAAER,SAAU,UACzB,SAGLU,QAAU,SAAAN,GACRA,EAAEO,iBACFJ,EAAKK,MAAMnB,KAAKoB,eAAe,SAACC,EAAKC,GACnC,GAAID,EAAK,OAAOP,EAAKJ,UAAUW,GAE/BP,EAAKC,SAAS,CAAER,SAAU,YAHoB,IAI5BgB,EAAoBD,EAA9BjB,SAAiBC,EAAagB,EAAbhB,SACnBD,EAAWkB,EAAMC,cAEvBC,MAAM,aAAc,CAClBC,OAAQ,OACRC,QAAS,CACPC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAE1B,WAAUC,eAEhC0B,KAAK,SAAAC,GAAC,OAAIA,EAAEC,SACZF,KAAK,SAAAG,GACJ,IADgBA,EAATC,GAMA,MAAM,IAAIC,MAAM,gBAJrBvB,EAAKC,SAAS,CAAER,SAAU,UAC1BS,WAAW,WACTsB,YAAS,MACR,OAGNC,MAAMzB,EAAKJ,sFAjFR,IACA8B,EAAsBC,KAAKtB,MAAMnB,KAAjCwC,kBACR,OACEE,EAAAC,EAAAC,cAAC/C,EAAD,CAASgD,MAAOJ,KAAKtB,MAAM0B,OACzBH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,SAAUN,KAAKxB,QAAS+B,UAAWhD,GACvC0C,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAACE,EAAA,EAAKG,KAAN,KACGT,EAAkB,WAAY,CAC7BU,MAAO,CACL,CAAEC,UAAU,EAAMC,QAAS,iCAF9BZ,CAKCE,EAAAC,EAAAC,cAACS,EAAA,EAAD,CACEC,OAAQZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAMC,KAAK,OAAOX,MAAOJ,KAAKjC,cACtCiD,YAAY,eAIlBf,EAAAC,EAAAC,cAACE,EAAA,EAAKG,KAAN,KACGT,EAAkB,WAAY,CAC7BU,MAAO,CACL,CAAEC,UAAU,EAAMC,QAAS,iCAF9BZ,CAKCE,EAAAC,EAAAC,cAACS,EAAA,EAAD,CACEC,OAAQZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAMC,KAAK,OAAOX,MAAOJ,KAAKjC,cACtCgD,KAAK,WACLC,YAAY,eAKlBf,EAAAC,EAAAC,cAACc,EAAA,EAAOC,MAAR,CAAcC,KAAK,SACjBlB,EAAAC,EAAAC,cAACc,EAAA,EAAD,CACEF,KAA8B,UAAxBf,KAAKrC,MAAMG,SAAuB,SAAW,UACnDsD,SAAS,SACTD,KAAK,SACLlB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAMC,KAAMf,KAAKrC,MAAMG,WAJzB,UAMAmC,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAQF,KAAK,UAAUM,KAAK,aAA5B,YACWpB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAMC,KAAK,wBAnDdO,IAAMC,eAsGXC,cAAKC,QAALD,CAAc9D","file":"static/js/18.48e9215b.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Icon, Input, Button, Form } from 'antd'\nimport { navigate } from '@reach/router'\n\nimport styled, { css } from 'react-emotion'\n\nconst Wrapper = styled('div')`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nconst form = css`\n  background-color: rgba(55, 55, 55, 0.85);\n  box-shadow: 0 0 5px rgba(55, 55, 55, 0.85);\n  border-radius: 5px;\n  padding: 24px;\n  width: 50%;\n  max-width: 360px;\n  min-height: 240px;\n  color: #fff;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  align-items: stretch;\n`\n\nclass Login extends React.PureComponent {\n  state = {\n    username: '',\n    password: '',\n    progress: 'lock'\n  }\n\n  prefixStyle = {\n    color: 'rgba(0, 0, 0, 0.25)'\n  }\n\n  render () {\n    const { getFieldDecorator } = this.props.form\n    return (\n      <Wrapper style={this.props.style}>\n        <Form onSubmit={this.doLogin} className={form}>\n          <strong>Please log in</strong>\n          <Form.Item>\n            {getFieldDecorator('username', {\n              rules: [\n                { required: true, message: 'Please input your username!' }\n              ]\n            })(\n              <Input\n                prefix={<Icon type='user' style={this.prefixStyle} />}\n                placeholder='Username'\n              />\n            )}\n          </Form.Item>\n          <Form.Item>\n            {getFieldDecorator('password', {\n              rules: [\n                { required: true, message: 'Please input your Password!' }\n              ]\n            })(\n              <Input\n                prefix={<Icon type='lock' style={this.prefixStyle} />}\n                type='password'\n                placeholder='Password'\n              />\n            )}\n          </Form.Item>\n\n          <Button.Group size='large'>\n            <Button\n              type={this.state.progress === 'close' ? 'danger' : 'primary'}\n              htmlType='submit'\n              size='large'>\n              <Icon type={this.state.progress} /> Login\n            </Button>\n            <Button type='default' href='/register'>\n              Register <Icon type='user-add' />\n            </Button>\n          </Button.Group>\n        </Form>\n      </Wrapper>\n    )\n  }\n\n  handleErr = e => {\n    console.error(e)\n    this.setState({ progress: 'close' })\n    setTimeout(() => {\n      this.setState({ progress: 'lock' })\n    }, 1500)\n  }\n\n  doLogin = e => {\n    e.preventDefault()\n    this.props.form.validateFields((err, values) => {\n      if (err) return this.handleErr(err)\n\n      this.setState({ progress: 'loading' })\n      const { username: uname, password } = values\n      const username = uname.toLowerCase()\n\n      fetch('/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ username, password })\n      })\n        .then(r => r.json())\n        .then(({ ok }) => {\n          if (ok) {\n            this.setState({ progress: 'check' })\n            setTimeout(() => {\n              navigate('/')\n            }, 500)\n          } else throw new Error('Unauthorized')\n        })\n        .catch(this.handleErr)\n    })\n  }\n\n  static propTypes = {\n    style: PropTypes.object,\n    form: PropTypes.object\n  }\n}\n\nexport default Form.create()(Login)\n"],"sourceRoot":""}