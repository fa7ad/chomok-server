{"version":3,"sources":["pages/_admin/AddZone.js"],"names":["FormItem","Form","Item","AddZone","state","progress","handleSubmit","e","preventDefault","_this","setState","props","form","validateFieldsAndScroll","err","values","body","JSON","stringify","map","toLower","fetch","credentials","method","headers","Content-Type","then","r","status","navigate","json","rep","ok","Error","catch","console","error","getFieldDecorator","this","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","antd__WEBPACK_IMPORTED_MODULE_8__","onSubmit","rules","required","message","antd__WEBPACK_IMPORTED_MODULE_9__","placeholder","antd__WEBPACK_IMPORTED_MODULE_10__","type","htmlType","antd__WEBPACK_IMPORTED_MODULE_11__","PureComponent","ControlledAddZone","create"],"mappings":"iNAMMA,EAAWC,IAAKC,KAEhBC,6MACJC,MAAQ,CACNC,SAAU,UAGZC,aAAe,SAAAC,GACbA,EAAEC,iBACFC,EAAKC,SAAS,CAAEL,SAAU,YAC1BI,EAAKE,MAAMC,KAAKC,wBAAwB,SAACC,EAAKC,GAC5C,GAAID,EAAK,OAAOL,EAAKC,SAAS,CAAEL,SAAU,UAC1C,IAAMW,EAAOC,KAAKC,UAAUC,YAAIC,IAASL,IACzCM,MAAM,aAAc,CAClBC,YAAa,UACbC,OAAQ,OACRC,QAAS,CACPC,eAAgB,oBAElBT,SAECU,KAAK,SAAAC,GAEJ,OADiB,MAAbA,EAAEC,QAAgBC,YAAS,UACxBF,EAAEG,SAEVJ,KAAK,SAAAK,GACJ,IAAIA,EAAIC,GAGD,MAAM,IAAIC,MAAM,2BAFrBxB,EAAKC,SAAS,CAAEL,SAAU,UAC1BwB,YAAS,kBAGZK,MAAM,SAAA3B,GACLE,EAAKC,SAAS,CAAEL,SAAU,UAC1B8B,QAAQC,MAAM7B,gFAKZ,IACA8B,EAAsBC,KAAK3B,MAAMC,KAAjCyB,kBAER,OACEE,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,SAAUL,KAAKhC,cACnBiC,EAAAC,EAAAC,cAACzC,EAAD,KACGqC,EAAkB,WAAY,CAC7BO,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,8BADpCT,CAEEE,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOC,YAAY,uBAExBT,EAAAC,EAAAC,cAACzC,EAAD,KACGqC,EAAkB,OAAQ,CACzBO,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,+BADpCT,CAEEE,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOC,YAAY,wBAExBT,EAAAC,EAAAC,cAACzC,EAAD,KACEuC,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACEC,KAA8B,UAAxBZ,KAAKlC,MAAMC,SAAuB,SAAW,UACnD8C,SAAS,UACTZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAMF,KAAMZ,KAAKlC,MAAMC,qBAvDbgD,iBAmEhBC,EAAoBrD,IAAKsD,QAALtD,CAAcE,GAEzBmD","file":"static/js/12.8070c2ea.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\nimport { map, toLower } from 'ramda'\nimport { navigate } from '@reach/router'\nimport React, { PureComponent } from 'react'\nimport { Form, Button, Input, Icon } from 'antd'\n\nconst FormItem = Form.Item\n\nclass AddZone extends PureComponent {\n  state = {\n    progress: 'plus'\n  }\n\n  handleSubmit = e => {\n    e.preventDefault()\n    this.setState({ progress: 'loading' })\n    this.props.form.validateFieldsAndScroll((err, values) => {\n      if (err) return this.setState({ progress: 'close' })\n      const body = JSON.stringify(map(toLower, values))\n      fetch('/api/zones', {\n        credentials: 'include',\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body\n      })\n        .then(r => {\n          if (r.status === 401) navigate('/login')\n          return r.json()\n        })\n        .then(rep => {\n          if (rep.ok) {\n            this.setState({ progress: 'check' })\n            navigate('/admin/zones')\n          } else throw new Error('Something wrong, again!')\n        })\n        .catch(e => {\n          this.setState({ progress: 'close' })\n          console.error(e)\n        })\n    })\n  }\n\n  render () {\n    const { getFieldDecorator } = this.props.form\n\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <FormItem>\n          {getFieldDecorator('division', {\n            rules: [{ required: true, message: 'Please enter a division!' }]\n          })(<Input placeholder='Enter a division' />)}\n        </FormItem>\n        <FormItem>\n          {getFieldDecorator('name', {\n            rules: [{ required: true, message: 'Please enter a zone name!' }]\n          })(<Input placeholder='Enter a zone name' />)}\n        </FormItem>\n        <FormItem>\n          <Button\n            type={this.state.progress === 'close' ? 'danger' : 'primary'}\n            htmlType='submit'>\n            <Icon type={this.state.progress} />\n          </Button>\n        </FormItem>\n      </Form>\n    )\n  }\n\n  static propTypes = {\n    form: PropTypes.object\n  }\n}\n\nconst ControlledAddZone = Form.create()(AddZone)\n\nexport default ControlledAddZone\n"],"sourceRoot":""}