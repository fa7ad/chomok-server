{"version":3,"sources":["pages/Register.js"],"names":["Wrapper","styled","_templateObject","form","css","_templateObject2","Register","state","username","password","progress","prefixStyle","color","handleErr","e","console","error","_this","setState","setTimeout","doReg","preventDefault","props","validateFields","err","values","fetch","method","headers","Content-Type","body","JSON","stringify","then","r","json","_ref","ok","Error","navigate","catch","getFieldDecorator","this","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","style","antd__WEBPACK_IMPORTED_MODULE_7__","onSubmit","className","Item","rules","required","message","antd__WEBPACK_IMPORTED_MODULE_8__","placeholder","type","antd__WEBPACK_IMPORTED_MODULE_9__","Group","htmlType","antd__WEBPACK_IMPORTED_MODULE_10__","href","React","PureComponent","Form","create"],"mappings":"svBAOA,IAAMA,EAAUC,YAAO,MAAPA,CAAHC,KAOPC,EAAOC,YAAHC,KAgBJC,6MACJC,MAAQ,CACNC,SAAU,GACVC,SAAU,GACVC,SAAU,cAGZC,YAAc,CACZC,MAAO,yBA2ETC,UAAY,SAAAC,GACVC,QAAQC,MAAMF,GACdG,EAAKC,SAAS,CAAER,SAAU,UAC1BS,WAAW,WACTF,EAAKC,SAAS,CAAER,SAAU,cACzB,SAGLU,MAAQ,SAAAN,GACNA,EAAEO,iBACFJ,EAAKK,MAAMnB,KAAKoB,eAAe,SAACC,EAAKC,GACnC,GAAID,EAAK,OAAOP,EAAKJ,UAAUW,GAE/BP,EAAKC,SAAS,CAAER,SAAU,YAE1BgB,MAAM,gBAAiB,CACrBC,OAAQ,OACRC,QAAS,CACPC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUP,KAEpBQ,KAAK,SAAAC,GAAC,OAAIA,EAAEC,SACZF,KAAK,SAAAG,GACJ,IADgBA,EAATC,GAMA,MAAM,IAAIC,MAAM,eAJrBrB,EAAKC,SAAS,CAAER,SAAU,UAC1BS,WAAW,WACToB,YAAS,WACR,OAGNC,MAAMvB,EAAKJ,sFAvGR,IACA4B,EAAsBC,KAAKpB,MAAMnB,KAAjCsC,kBACR,OACEE,EAAAC,EAAAC,cAAC7C,EAAD,CAAS8C,MAAOJ,KAAKpB,MAAMwB,OACzBH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,SAAUN,KAAKtB,MAAO6B,UAAW9C,GACrCwC,EAAAC,EAAAC,cAAA,wCACAF,EAAAC,EAAAC,cAACE,EAAA,EAAKG,KAAN,KACGT,EAAkB,OAAQ,CACzBU,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,iCAJdZ,CAOEE,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOC,YAAY,gBAExBZ,EAAAC,EAAAC,cAACE,EAAA,EAAKG,KAAN,KACGT,EAAkB,QAAS,CAC1BU,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,oCAJdZ,CAOEE,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOC,YAAY,mBAExBZ,EAAAC,EAAAC,cAACE,EAAA,EAAKG,KAAN,KACGT,EAAkB,WAAY,CAC7BU,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,gCAJdZ,CAOEE,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOC,YAAY,eAExBZ,EAAAC,EAAAC,cAACE,EAAA,EAAKG,KAAN,KACGT,EAAkB,WAAY,CAC7BU,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,gCAJdZ,CAOEE,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOC,YAAY,WAAWC,KAAK,eAExCb,EAAAC,EAAAC,cAACE,EAAA,EAAKG,KAAN,KACGT,EAAkB,QAAS,CAC1BU,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,6BAJdZ,CAOEE,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOC,YAAY,SAASC,KAAK,YAGtCb,EAAAC,EAAAC,cAACY,EAAA,EAAOC,MAAR,KACEf,EAAAC,EAAAC,cAACY,EAAA,EAAD,CACED,KAA8B,UAAxBd,KAAKnC,MAAMG,SAAuB,SAAW,UACnDiD,SAAS,UACThB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAMJ,KAAMd,KAAKnC,MAAMG,WAHzB,aAKAiC,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAQD,KAAK,UAAUK,KAAK,UAA5B,SACQlB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAMJ,KAAK,oBA3ERM,IAAMC,eA4HdC,cAAKC,QAALD,CAAc1D","file":"static/js/24.68eb8d2f.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Icon, Input, Button, Form } from 'antd'\nimport { navigate } from '@reach/router'\n\nimport styled, { css } from 'react-emotion'\n\nconst Wrapper = styled('div')`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nconst form = css`\n  background-color: rgba(55, 55, 55, 0.85);\n  box-shadow: 0 0 5px rgba(55, 55, 55, 0.85);\n  border-radius: 5px;\n  padding: 24px;\n  width: 100%;\n  max-width: 360px;\n  min-height: 240px;\n  color: #fff;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  align-items: stretch;\n`\n\nclass Register extends React.PureComponent {\n  state = {\n    username: '',\n    password: '',\n    progress: 'user-add'\n  }\n\n  prefixStyle = {\n    color: 'rgba(0, 0, 0, 0.25)'\n  }\n\n  render () {\n    const { getFieldDecorator } = this.props.form\n    return (\n      <Wrapper style={this.props.style}>\n        <Form onSubmit={this.doReg} className={form}>\n          <strong>Please enter your info</strong>\n          <Form.Item>\n            {getFieldDecorator('name', {\n              rules: [\n                {\n                  required: true,\n                  message: 'Please enter the full name!'\n                }\n              ]\n            })(<Input placeholder='Full name' />)}\n          </Form.Item>\n          <Form.Item>\n            {getFieldDecorator('phone', {\n              rules: [\n                {\n                  required: true,\n                  message: 'Please enter the phone number!'\n                }\n              ]\n            })(<Input placeholder='Phone number' />)}\n          </Form.Item>\n          <Form.Item>\n            {getFieldDecorator('username', {\n              rules: [\n                {\n                  required: true,\n                  message: 'Please enter the username!'\n                }\n              ]\n            })(<Input placeholder='Username' />)}\n          </Form.Item>\n          <Form.Item>\n            {getFieldDecorator('password', {\n              rules: [\n                {\n                  required: true,\n                  message: 'Please enter the password!'\n                }\n              ]\n            })(<Input placeholder='Password' type='password' />)}\n          </Form.Item>\n          <Form.Item>\n            {getFieldDecorator('email', {\n              rules: [\n                {\n                  required: true,\n                  message: 'Please enter the email!'\n                }\n              ]\n            })(<Input placeholder='E-mail' type='email' />)}\n          </Form.Item>\n\n          <Button.Group>\n            <Button\n              type={this.state.progress === 'close' ? 'danger' : 'primary'}\n              htmlType='submit'>\n              <Icon type={this.state.progress} /> Register\n            </Button>\n            <Button type='default' href='/login'>\n              Login <Icon type='lock' />\n            </Button>\n          </Button.Group>\n        </Form>\n      </Wrapper>\n    )\n  }\n\n  handleErr = e => {\n    console.error(e)\n    this.setState({ progress: 'close' })\n    setTimeout(() => {\n      this.setState({ progress: 'user-add' })\n    }, 1500)\n  }\n\n  doReg = e => {\n    e.preventDefault()\n    this.props.form.validateFields((err, values) => {\n      if (err) return this.handleErr(err)\n\n      this.setState({ progress: 'loading' })\n\n      fetch('/api/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(values)\n      })\n        .then(r => r.json())\n        .then(({ ok }) => {\n          if (ok) {\n            this.setState({ progress: 'check' })\n            setTimeout(() => {\n              navigate('/login')\n            }, 500)\n          } else throw new Error('Bad request')\n        })\n        .catch(this.handleErr)\n    })\n  }\n\n  static propTypes = {\n    style: PropTypes.object,\n    form: PropTypes.object\n  }\n}\n\nexport default Form.create()(Register)\n"],"sourceRoot":""}